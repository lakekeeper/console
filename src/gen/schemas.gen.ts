// This file is auto-generated by @hey-api/openapi-ts

export const AuthZBackendSchema = {
    type: 'string',
    enum: ['allow-all', 'openfga']
} as const;

export const AzCredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'AzCredentialClientCredentials',
            required: ['client-id', 'tenant-id', 'client-secret', 'credential-type'],
            properties: {
                'client-id': {
                    type: 'string'
                },
                'client-secret': {
                    type: 'string'
                },
                'credential-type': {
                    type: 'string',
                    enum: ['client-credentials']
                },
                'tenant-id': {
                    type: 'string'
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'credential-type'
    }
} as const;

export const AzdlsProfileSchema = {
    type: 'object',
    required: ['filesystem', 'account-name'],
    properties: {
        'account-name': {
            type: 'string',
            description: 'Name of the azure storage account.'
        },
        'authority-host': {
            type: 'string',
            format: 'uri',
            description: 'The authority host to use for authentication. Default: `https://login.microsoftonline.com`.',
            nullable: true
        },
        filesystem: {
            type: 'string',
            description: 'Name of the azdls filesystem, in blobstorage also known as container.'
        },
        host: {
            type: 'string',
            description: 'The host to use for the storage account. Default: `dfs.core.windows.net`.',
            nullable: true
        },
        'key-prefix': {
            type: 'string',
            description: `Subpath in the filesystem to use.
The same prefix can be used for multiple warehouses.`,
            nullable: true
        },
        'sas-token-validity-seconds': {
            type: 'integer',
            format: 'int64',
            description: 'The validity of the sas token in seconds. Default: 3600.',
            nullable: true,
            minimum: 0
        }
    }
} as const;

export const BootstrapRequestSchema = {
    type: 'object',
    required: ['accept-terms-of-use'],
    properties: {
        'accept-terms-of-use': {
            type: 'boolean',
            description: 'Set to true if you accept LAKEKEEPER terms of use.'
        },
        'user-email': {
            type: 'string',
            description: `Email of the user performing bootstrap. Optional. If not provided
the server will try to parse the email from the provided token.`,
            nullable: true
        },
        'user-name': {
            type: 'string',
            description: `Name of the user performing bootstrap. Optional. If not provided
the server will try to parse the name from the provided token.
The initial user will become the global admin.`,
            nullable: true
        },
        'user-type': {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserType'
                }
            ],
            nullable: true
        }
    }
} as const;

export const CreateProjectRequestSchema = {
    type: 'object',
    required: ['project-name'],
    properties: {
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: `Request a specific project ID - optional.
If not provided, a new project ID will be generated (recommended).`,
            nullable: true
        },
        'project-name': {
            type: 'string',
            description: 'Name of the project to create.'
        }
    }
} as const;

export const CreateProjectResponseSchema = {
    type: 'object',
    required: ['project-id'],
    properties: {
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the created project.'
        }
    }
} as const;

export const CreateRoleRequestSchema = {
    type: 'object',
    required: ['name'],
    properties: {
        description: {
            type: 'string',
            description: 'Description of the role',
            nullable: true
        },
        name: {
            type: 'string',
            description: 'Name of the role to create'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: `Project ID in which the role is created.
Only required if the project ID cannot be inferred and no default project is set.`
        }
    }
} as const;

export const CreateUserRequestSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            description: `Email of the user. If id is not specified, the email is extracted
from the provided token.`,
            nullable: true
        },
        id: {
            type: 'string',
            description: `Subject id of the user - allows user provisioning.
The id must be identical to the subject in JWT tokens.
To create users in self-service manner, do not set the id.
The id is then extracted from the passed JWT token.`,
            nullable: true
        },
        name: {
            type: 'string',
            description: `Name of the user. If id is not specified, the name is extracted
from the provided token.`,
            nullable: true
        },
        'update-if-exists': {
            type: 'boolean',
            description: `Update the user if it already exists
Default: false`
        },
        'user-type': {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserType'
                }
            ],
            nullable: true
        }
    }
} as const;

export const CreateWarehouseRequestSchema = {
    type: 'object',
    required: ['warehouse-name', 'storage-profile'],
    properties: {
        'delete-profile': {
            '$ref': '#/components/schemas/TabularDeleteProfile'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: `Project ID in which to create the warehouse.
If no default project is set for this server, this field is required.`,
            nullable: true
        },
        'storage-credential': {
            allOf: [
                {
                    '$ref': '#/components/schemas/StorageCredential'
                }
            ],
            nullable: true
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile'
        },
        'warehouse-name': {
            type: 'string',
            description: `Name of the warehouse to create. Must be unique
within a project and may not contain "/"`
        }
    }
} as const;

export const CreateWarehouseResponseSchema = {
    type: 'object',
    required: ['warehouse-id'],
    properties: {
        'warehouse-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the created warehouse.'
        }
    }
} as const;

export const DeleteKindSchema = {
    type: 'string',
    enum: ['default', 'purge']
} as const;

export const DeletedTabularResponseSchema = {
    type: 'object',
    required: ['id', 'name', 'namespace', 'typ', 'warehouse_id', 'created_at', 'deleted_at', 'expiration_date'],
    properties: {
        created_at: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular was created'
        },
        deleted_at: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular was deleted'
        },
        expiration_date: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular will not be recoverable anymore'
        },
        id: {
            type: 'string',
            format: 'uuid',
            description: 'Unique identifier of the tabular'
        },
        name: {
            type: 'string',
            description: 'Name of the tabular'
        },
        namespace: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'List of namespace parts the tabular belongs to'
        },
        typ: {
            '$ref': '#/components/schemas/TabularType'
        },
        warehouse_id: {
            type: 'string',
            format: 'uuid',
            description: 'Warehouse ID where the tabular is stored'
        }
    }
} as const;

export const GcsCredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'GcsCredentialServiceAccountKey',
            description: `Service Account Key

The key is the JSON object obtained when creating a service account key in the GCP console.`,
            required: ['key', 'credential-type'],
            properties: {
                'credential-type': {
                    type: 'string',
                    enum: ['service-account-key']
                },
                key: {
                    '$ref': '#/components/schemas/GcsServiceKey'
                }
            }
        }
    ],
    description: `GCS Credentials

Currently only supports Service Account Key
Example of a key:
\`\`\`json
{
"type": "service_account",
"project_id": "example-project-1234",
"private_key_id": "....",
"private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
"client_email": "abc@example-project-1234.iam.gserviceaccount.com",
"client_id": "123456789012345678901",
"auth_uri": "https://accounts.google.com/o/oauth2/auth",
"token_uri": "https://oauth2.googleapis.com/token",
"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
"universe_domain": "googleapis.com"
}
\`\`\``,
    discriminator: {
        propertyName: 'credential-type'
    }
} as const;

export const GcsProfileSchema = {
    type: 'object',
    required: ['bucket'],
    properties: {
        bucket: {
            type: 'string',
            description: 'Name of the GCS bucket'
        },
        'key-prefix': {
            type: 'string',
            description: `Subpath in the bucket to use.
The same prefix can be used for multiple warehouses.`,
            nullable: true
        }
    }
} as const;

export const GcsServiceKeySchema = {
    type: 'object',
    required: ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id', 'auth_uri', 'token_uri', 'auth_provider_x509_cert_url', 'client_x509_cert_url', 'universe_domain'],
    properties: {
        auth_provider_x509_cert_url: {
            type: 'string'
        },
        auth_uri: {
            type: 'string'
        },
        client_email: {
            type: 'string'
        },
        client_id: {
            type: 'string'
        },
        client_x509_cert_url: {
            type: 'string'
        },
        private_key: {
            type: 'string'
        },
        private_key_id: {
            type: 'string'
        },
        project_id: {
            type: 'string'
        },
        token_uri: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        universe_domain: {
            type: 'string'
        }
    }
} as const;

export const GetNamespaceAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAction'
            }
        }
    }
} as const;

export const GetNamespaceAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        }
    }
} as const;

export const GetNamespaceResponseSchema = {
    type: 'object',
    required: ['managed-access'],
    properties: {
        'managed-access': {
            type: 'boolean'
        }
    }
} as const;

export const GetProjectAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAction'
            }
        }
    }
} as const;

export const GetProjectAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments', 'project-id'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        },
        'project-id': {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const GetProjectResponseSchema = {
    type: 'object',
    required: ['project-id', 'project-name'],
    properties: {
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the project.'
        },
        'project-name': {
            type: 'string',
            description: 'Name of the project'
        }
    }
} as const;

export const GetRoleAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAction'
            }
        }
    }
} as const;

export const GetRoleAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        }
    }
} as const;

export const GetServerAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAction'
            }
        }
    }
} as const;

export const GetServerAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        }
    }
} as const;

export const GetTableAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAction'
            }
        }
    }
} as const;

export const GetTableAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        }
    }
} as const;

export const GetViewAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAction'
            }
        }
    }
} as const;

export const GetViewAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        }
    }
} as const;

export const GetWarehouseAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAction'
            }
        }
    }
} as const;

export const GetWarehouseAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        }
    }
} as const;

export const GetWarehouseResponseSchema = {
    type: 'object',
    required: ['id', 'name', 'project-id', 'storage-profile', 'status'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the warehouse.'
        },
        name: {
            type: 'string',
            description: 'Name of the warehouse.'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Project ID in which the warehouse is created.'
        },
        status: {
            '$ref': '#/components/schemas/WarehouseStatus'
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile'
        }
    }
} as const;

export const ListDeletedTabularsResponseSchema = {
    type: 'object',
    required: ['tabulars'],
    properties: {
        next_page_token: {
            type: 'string',
            description: 'Token to fetch the next page',
            nullable: true
        },
        tabulars: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DeletedTabularResponse'
            },
            description: 'List of tabulars'
        }
    }
} as const;

export const ListProjectsResponseSchema = {
    type: 'object',
    required: ['projects'],
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProjectResponse'
            },
            description: 'List of projects'
        }
    }
} as const;

export const ListRolesResponseSchema = {
    type: 'object',
    required: ['roles'],
    properties: {
        next_page_token: {
            type: 'string',
            nullable: true
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        }
    }
} as const;

export const ListUsersResponseSchema = {
    type: 'object',
    required: ['users'],
    properties: {
        next_page_token: {
            type: 'string',
            nullable: true
        },
        users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    }
} as const;

export const ListWarehousesRequestSchema = {
    type: 'object',
    properties: {
        projectId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ProjectIdent'
                }
            ],
            nullable: true
        },
        warehouseStatus: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseStatus'
            },
            description: `Optional filter to return only warehouses
with the specified status.
If not provided, only active warehouses are returned.`,
            nullable: true
        }
    }
} as const;

export const ListWarehousesResponseSchema = {
    type: 'object',
    required: ['warehouses'],
    properties: {
        warehouses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetWarehouseResponse'
            },
            description: 'List of warehouses in the project.'
        }
    }
} as const;

export const NamespaceActionSchema = {
    type: 'string',
    enum: ['create_table', 'create_view', 'create_namespace', 'delete', 'update_properties', 'get_metadata', 'read_assignments', 'grant_create', 'grant_describe', 'grant_modify', 'grant_select', 'grant_pass_grants', 'grant_manage_grants']
} as const;

export const NamespaceAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentOwnership'
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentPassGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['pass_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentManageGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['manage_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentDescribe',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['describe']
                }
            }
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentSelect',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['select']
                }
            }
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentCreate',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['create']
                }
            }
        },
        {
            type: 'object',
            title: 'NamespaceAssignmentModify',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['modify']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const NamespaceRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'create', 'modify']
} as const;

export const ProjectActionSchema = {
    type: 'string',
    enum: ['create_warehouse', 'delete', 'rename', 'list_warehouses', 'create_role', 'list_roles', 'search_roles', 'read_assignments', 'grant_role_creator', 'grant_create', 'grant_describe', 'grant_modify', 'grant_select', 'grant_project_admin', 'grant_security_admin', 'grant_warehouse_admin']
} as const;

export const ProjectAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['project_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentProjectAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['security_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentSecurityAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['warehouse_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentWarehouseAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['role_creator']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentRoleCreator'
        },
        {
            type: 'object',
            title: 'ProjectAssignmentDescribe',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['describe']
                }
            }
        },
        {
            type: 'object',
            title: 'ProjectAssignmentSelect',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['select']
                }
            }
        },
        {
            type: 'object',
            title: 'ProjectAssignmentCreate',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['create']
                }
            }
        },
        {
            type: 'object',
            title: 'ProjectAssignmentModify',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['modify']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const ProjectIdentSchema = {
    type: 'string',
    format: 'uuid'
} as const;

export const ProjectRelationSchema = {
    type: 'string',
    enum: ['project_admin', 'security_admin', 'warehouse_admin', 'role_creator', 'describe', 'select', 'create', 'modify']
} as const;

export const RenameProjectRequestSchema = {
    type: 'object',
    required: ['new-name'],
    properties: {
        'new-name': {
            type: 'string',
            description: 'New name for the project.'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: `Optional project ID.
Only required if the project ID cannot be inferred and no default project is set.`,
            nullable: true
        }
    }
} as const;

export const RenameWarehouseRequestSchema = {
    type: 'object',
    required: ['new-name'],
    properties: {
        'new-name': {
            type: 'string',
            description: 'New name for the warehouse.'
        }
    }
} as const;

export const RoleSchema = {
    type: 'object',
    required: ['id', 'name', 'project-id', 'created-at'],
    properties: {
        'created-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the role was created'
        },
        description: {
            type: 'string',
            description: 'Description of the role',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            description: 'Globally unique id of this role'
        },
        name: {
            type: 'string',
            description: 'Name of the role'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Project ID in which the role is created.'
        },
        'updated-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the role was last updated',
            nullable: true
        }
    }
} as const;

export const RoleActionSchema = {
    type: 'string',
    enum: ['assume', 'can_grant_assignee', 'can_change_ownership', 'delete', 'update', 'read', 'read_assignments']
} as const;

export const RoleAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['assignee']
                        }
                    }
                }
            ],
            title: 'RoleAssignmentAssignee'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'RoleAssignmentOwnership'
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const S3CredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'S3CredentialAccessKey',
            required: ['aws-access-key-id', 'aws-secret-access-key', 'credential-type'],
            properties: {
                'aws-access-key-id': {
                    type: 'string'
                },
                'aws-secret-access-key': {
                    type: 'string'
                },
                'credential-type': {
                    type: 'string',
                    enum: ['access-key']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'credential-type'
    }
} as const;

export const S3FlavorSchema = {
    type: 'string',
    enum: ['aws', 'minio']
} as const;

export const S3ProfileSchema = {
    type: 'object',
    required: ['bucket', 'region', 'sts-enabled'],
    properties: {
        'assume-role-arn': {
            type: 'string',
            description: 'Optional ARN to assume when accessing the bucket',
            nullable: true
        },
        bucket: {
            type: 'string',
            description: 'Name of the S3 bucket'
        },
        endpoint: {
            type: 'string',
            format: 'uri',
            description: `Optional endpoint to use for S3 requests, if not provided
the region will be used to determine the endpoint.
If both region and endpoint are provided, the endpoint will be used.
Example: \`http://s3-de.my-domain.com:9000\``,
            nullable: true
        },
        flavor: {
            '$ref': '#/components/schemas/S3Flavor'
        },
        'key-prefix': {
            type: 'string',
            description: `Subpath in the bucket to use.
The same prefix can be used for multiple warehouses.`,
            nullable: true
        },
        'path-style-access': {
            type: 'boolean',
            description: `Path style access for S3 requests.
If the underlying S3 supports both, we recommend to not set \`path_style_access\`.`,
            nullable: true
        },
        region: {
            type: 'string',
            description: 'Region to use for S3 requests.'
        },
        'sts-enabled': {
            type: 'boolean'
        },
        'sts-role-arn': {
            type: 'string',
            description: 'Optional role ARN to assume for sts vended-credentials',
            nullable: true
        }
    }
} as const;

export const SearchRoleRequestSchema = {
    type: 'object',
    required: ['search'],
    properties: {
        'project-id': {
            allOf: [
                {
                    '$ref': '#/components/schemas/ProjectIdent'
                }
            ],
            nullable: true
        },
        search: {
            type: 'string',
            description: `Search string for fuzzy search.
Length is truncated to 64 characters.`
        }
    }
} as const;

export const SearchRoleResponseSchema = {
    type: 'object',
    required: ['roles'],
    properties: {
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            },
            description: 'List of users matching the search criteria'
        }
    }
} as const;

export const SearchUserSchema = {
    type: 'object',
    required: ['name', 'id', 'user-type'],
    properties: {
        id: {
            type: 'string',
            description: 'ID of the user'
        },
        name: {
            type: 'string',
            description: 'Name of the user'
        },
        'user-type': {
            '$ref': '#/components/schemas/UserType'
        }
    }
} as const;

export const SearchUserRequestSchema = {
    type: 'object',
    required: ['search'],
    properties: {
        search: {
            type: 'string',
            description: `Search string for fuzzy search.
Length is truncated to 64 characters.`
        }
    }
} as const;

export const SearchUserResponseSchema = {
    type: 'object',
    description: 'Search result for users',
    required: ['users'],
    properties: {
        users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SearchUser'
            },
            description: 'List of users matching the search criteria'
        }
    }
} as const;

export const ServerActionSchema = {
    type: 'string',
    enum: ['create_project', 'update_users', 'delete_users', 'list_users', 'grant_global_admin', 'provision_users', 'read_assignments']
} as const;

export const ServerAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['global_admin']
                        }
                    }
                }
            ],
            title: 'ServerAssignmentGlobalAdmin'
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const ServerInfoSchema = {
    type: 'object',
    required: ['version', 'bootstrapped', 'server-id', 'default-project-id', 'authz-backend'],
    properties: {
        'authz-backend': {
            '$ref': '#/components/schemas/AuthZBackend'
        },
        bootstrapped: {
            type: 'boolean',
            description: 'Whether the catalog has been bootstrapped.'
        },
        'default-project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Default Project ID. Null if not set'
        },
        'server-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the server.'
        },
        version: {
            type: 'string',
            description: 'Version of the server.'
        }
    }
} as const;

export const ServerRelationSchema = {
    type: 'string',
    enum: ['global_admin']
} as const;

export const SetManagedAccessRequestSchema = {
    type: 'object',
    required: ['managed-access'],
    properties: {
        'managed-access': {
            type: 'boolean'
        }
    }
} as const;

export const StorageCredentialSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/S3Credential'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['s3']
                        }
                    }
                }
            ],
            title: 'StorageCredentialS3'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/AzCredential'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['az']
                        }
                    }
                }
            ],
            title: 'StorageCredentialAz'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/GcsCredential'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['gcs']
                        }
                    }
                }
            ],
            title: 'StorageCredentialGcs'
        }
    ],
    description: 'Storage secret for a warehouse.',
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const StorageProfileSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/AzdlsProfile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['azdls']
                        }
                    }
                }
            ],
            title: 'StorageProfileAzdls'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/S3Profile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['s3']
                        }
                    }
                }
            ],
            title: 'StorageProfileS3'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/GcsProfile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['gcs']
                        }
                    }
                }
            ],
            title: 'StorageProfileGcs'
        }
    ],
    description: 'Storage profile for a warehouse.',
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const TableActionSchema = {
    type: 'string',
    enum: ['drop', 'write_data', 'read_data', 'get_metadata', 'commit', 'rename', 'read_assignments', 'grant_pass_grants', 'grant_manage_grants', 'grant_describe', 'grant_select', 'grant_modify', 'change_ownership']
} as const;

export const TableAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'TableAssignmentOwnership'
        },
        {
            type: 'object',
            title: 'TableAssignmentPassGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['pass_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'TableAssignmentManageGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['manage_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'TableAssignmentDescribe',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['describe']
                }
            }
        },
        {
            type: 'object',
            title: 'TableAssignmentSelect',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['select']
                }
            }
        },
        {
            type: 'object',
            title: 'TableAssignmentCreate',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['modify']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const TableRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'modify']
} as const;

export const TabularDeleteProfileSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'TabularDeleteProfileHard',
            required: ['type'],
            properties: {
                type: {
                    type: 'string',
                    enum: ['hard']
                }
            }
        },
        {
            type: 'object',
            title: 'TabularDeleteProfileSoft',
            required: ['expiration_seconds', 'type'],
            properties: {
                expiration_seconds: {
                    type: 'string'
                },
                type: {
                    type: 'string',
                    enum: ['soft']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const TabularTypeSchema = {
    type: 'string',
    description: 'Type of tabular',
    enum: ['table', 'view']
} as const;

export const UpdateNamespaceAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        }
    }
} as const;

export const UpdateProjectAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        }
    }
} as const;

export const UpdateRoleAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        }
    }
} as const;

export const UpdateRoleRequestSchema = {
    type: 'object',
    required: ['name'],
    properties: {
        description: {
            type: 'string',
            description: 'Description of the role. If not set, the description will be removed.',
            nullable: true
        },
        name: {
            type: 'string',
            description: 'Name of the role to create'
        }
    }
} as const;

export const UpdateServerAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        }
    }
} as const;

export const UpdateTableAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        }
    }
} as const;

export const UpdateUserRequestSchema = {
    type: 'object',
    required: ['name', 'user_type'],
    properties: {
        email: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        },
        user_type: {
            '$ref': '#/components/schemas/UserType'
        }
    }
} as const;

export const UpdateViewAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        }
    }
} as const;

export const UpdateWarehouseAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        }
    }
} as const;

export const UpdateWarehouseCredentialRequestSchema = {
    type: 'object',
    properties: {
        'new-storage-credential': {
            allOf: [
                {
                    '$ref': '#/components/schemas/StorageCredential'
                }
            ],
            nullable: true
        }
    }
} as const;

export const UpdateWarehouseDeleteProfileRequestSchema = {
    type: 'object',
    required: ['delete-profile'],
    properties: {
        'delete-profile': {
            '$ref': '#/components/schemas/TabularDeleteProfile'
        }
    }
} as const;

export const UpdateWarehouseStorageRequestSchema = {
    type: 'object',
    required: ['storage-profile'],
    properties: {
        'storage-credential': {
            allOf: [
                {
                    '$ref': '#/components/schemas/StorageCredential'
                }
            ],
            nullable: true
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile'
        }
    }
} as const;

export const UserSchema = {
    type: 'object',
    description: 'User of the catalog',
    required: ['name', 'id', 'user-type', 'last-updated-with', 'created-at'],
    properties: {
        'created-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was created'
        },
        email: {
            type: 'string',
            description: 'Email of the user',
            nullable: true
        },
        id: {
            type: 'string',
            description: "The user's ID"
        },
        'last-updated-with': {
            '$ref': '#/components/schemas/UserLastUpdatedWith'
        },
        name: {
            type: 'string',
            description: 'Name of the user'
        },
        'updated-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was last updated',
            nullable: true
        },
        'user-type': {
            '$ref': '#/components/schemas/UserType'
        }
    }
} as const;

export const UserLastUpdatedWithSchema = {
    type: 'string',
    description: 'How the user was last updated',
    enum: ['create-endpoint', 'config-call-creation', 'update-endpoint']
} as const;

export const UserOrRoleSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'UserOrRoleUser',
            required: ['user'],
            properties: {
                user: {
                    type: 'string',
                    format: 'uuid'
                }
            }
        },
        {
            type: 'object',
            title: 'UserOrRoleRole',
            required: ['role'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                }
            }
        }
    ]
} as const;

export const UserTypeSchema = {
    type: 'string',
    description: 'Type of a User',
    enum: ['human', 'application']
} as const;

export const ViewActionSchema = {
    type: 'string',
    enum: ['drop', 'commit', 'get_metadata', 'rename', 'read_assignments', 'grant_pass_grants', 'grant_manage_grants', 'grant_describe', 'grant_modify', 'change_ownership']
} as const;

export const ViewAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentOwnership'
        },
        {
            type: 'object',
            title: 'ViewAssignmentPassGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['pass_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'ViewAssignmentManageGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['manage_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'ViewAssignmentDescribe',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['describe']
                }
            }
        },
        {
            type: 'object',
            title: 'ViewAssignmentModify',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['modify']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const ViewRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'modify']
} as const;

export const WarehouseActionSchema = {
    type: 'string',
    enum: ['CreateNamespace', 'Delete', 'ModifyStorage', 'ModifyStorageCredential', 'GetConfig', 'GetMetadata', 'ListNamespaces', 'IncludeInList', 'Deactivate', 'Activate', 'Rename', 'ListDeletedTabulars', 'ReadAssignments', 'GrantCreate', 'GrantDescribe', 'GrantModify', 'GrantSelect', 'GrantPassGrants', 'GrantManageGrants', 'ChangeOwnership']
} as const;

export const WarehouseAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentOwnership'
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentPassGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['pass_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentManageGrants',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['manage_grants']
                }
            }
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentDescribe',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['describe']
                }
            }
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentSelect',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['select']
                }
            }
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentCreate',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['create']
                }
            }
        },
        {
            type: 'object',
            title: 'WarehouseAssignmentModify',
            required: ['role', 'type'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['modify']
                }
            }
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const WarehouseRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'create', 'modify']
} as const;

export const WarehouseStatusSchema = {
    type: 'string',
    description: 'Status of a warehouse',
    enum: ['active', 'inactive']
} as const;