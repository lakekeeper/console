// This file is auto-generated by @hey-api/openapi-ts

export type AdlsProfile = {
    /**
     * Name of the azure storage account.
     */
    'account-name': string;
    /**
     * The authority host to use for authentication. Default: `https://login.microsoftonline.com`.
     */
    'authority-host'?: (string) | null;
    /**
     * Name of the adls filesystem, in blobstorage also known as container.
     */
    filesystem: string;
    /**
     * The host to use for the storage account. Default: `dfs.core.windows.net`.
     */
    host?: (string) | null;
    /**
     * Subpath in the filesystem to use.
     * The same prefix can be used for multiple warehouses.
     */
    'key-prefix'?: (string) | null;
    /**
     * The validity of the sas token in seconds. Default: 3600.
     */
    'sas-token-validity-seconds'?: (number) | null;
};

export type AuthZBackend = 'allow-all' | 'openfga';

export type AzCredential = {
    'client-id': string;
    'client-secret': string;
    'credential-type': 'client-credentials';
    'tenant-id': string;
};

export type credential_type = 'client-credentials';

export type BootstrapRequest = {
    /**
     * Set to true if you accept LAKEKEEPER terms of use.
     */
    'accept-terms-of-use': boolean;
    /**
     * If set to true, the calling user is treated as an operator and obtain
     * a corresponding role. If not specified, the user is treated as a human.
     */
    'is-operator'?: boolean;
    /**
     * Email of the user performing bootstrap. Optional. If not provided
     * the server will try to parse the email from the provided token.
     */
    'user-email'?: (string) | null;
    /**
     * Name of the user performing bootstrap. Optional. If not provided
     * the server will try to parse the name from the provided token.
     * The initial user will become the global admin.
     */
    'user-name'?: (string) | null;
    'user-type'?: (null | UserType);
};

/**
 * Represents an action on an object
 */
export type CheckOperation = {
    server: {
        action: ServerAction;
    };
} | {
    project: {
        action: ProjectAction;
        'project-id'?: (string) | null;
    };
} | {
    warehouse: {
        action: WarehouseAction;
        'warehouse-id': string;
    };
} | {
    namespace: (NamespaceIdentOrUuid & {
    action: NamespaceAction;
});
} | {
    table: (TabularIdentOrUuid & {
    action: TableAction;
});
} | {
    view: (TabularIdentOrUuid & {
    action: ViewAction;
});
};

/**
 * Check if a specific action is allowed on the given object
 */
export type CheckRequest = {
    identity?: (null | UserOrRole);
    /**
     * The operation to check.
     */
    operation: CheckOperation;
};

export type CheckResponse = {
    /**
     * Whether the action is allowed.
     */
    allowed: boolean;
};

export type CreateProjectRequest = {
    /**
     * Request a specific project ID - optional.
     * If not provided, a new project ID will be generated (recommended).
     */
    'project-id'?: (string) | null;
    /**
     * Name of the project to create.
     */
    'project-name': string;
};

export type CreateProjectResponse = {
    /**
     * ID of the created project.
     */
    'project-id': string;
};

export type CreateRoleRequest = {
    /**
     * Description of the role
     */
    description?: (string) | null;
    /**
     * Name of the role to create
     */
    name: string;
    /**
     * Project ID in which the role is created.
     * Only required if the project ID cannot be inferred and no default project is set.
     */
    'project-id'?: string;
};

export type CreateUserRequest = {
    /**
     * Email of the user. If id is not specified, the email is extracted
     * from the provided token.
     */
    email?: (string) | null;
    /**
     * Subject id of the user - allows user provisioning.
     * The id must be identical to the subject in JWT tokens.
     * To create users in self-service manner, do not set the id.
     * The id is then extracted from the passed JWT token.
     */
    id?: (string) | null;
    /**
     * Name of the user. If id is not specified, the name is extracted
     * from the provided token.
     */
    name?: (string) | null;
    /**
     * Update the user if it already exists
     * Default: false
     */
    'update-if-exists'?: boolean;
    'user-type'?: (null | UserType);
};

export type CreateWarehouseRequest = {
    /**
     * Profile to determine behavior upon dropping of tabulars, defaults to soft-deletion with
     * 7 days expiration.
     */
    'delete-profile'?: TabularDeleteProfile;
    /**
     * Project ID in which to create the warehouse.
     * If no default project is set for this server, this field is required.
     */
    'project-id'?: (string) | null;
    'storage-credential'?: (null | StorageCredential);
    /**
     * Storage profile to use for the warehouse.
     */
    'storage-profile': StorageProfile;
    /**
     * Name of the warehouse to create. Must be unique
     * within a project and may not contain "/"
     */
    'warehouse-name': string;
};

export type CreateWarehouseResponse = {
    /**
     * ID of the created warehouse.
     */
    'warehouse-id': string;
};

export type DeletedTabularResponse = {
    /**
     * Date when the tabular was created
     */
    created_at: string;
    /**
     * Date when the tabular was deleted
     */
    deleted_at: string;
    /**
     * Date when the tabular will not be recoverable anymore
     */
    expiration_date: string;
    /**
     * Unique identifier of the tabular
     */
    id: string;
    /**
     * Name of the tabular
     */
    name: string;
    /**
     * List of namespace parts the tabular belongs to
     */
    namespace: Array<(string)>;
    /**
     * Type of the tabular
     */
    typ: TabularType;
    /**
     * Warehouse ID where the tabular is stored
     */
    warehouse_id: string;
};

/**
 * JSON error payload returned in a response with further details on the error
 */
export type ErrorModel = {
    /**
     * HTTP response code
     */
    code: number;
    /**
     * Human-readable error message
     */
    message: string;
    stack?: Array<(string)>;
    /**
     * Internal type definition of the error
     */
    type: string;
};

/**
 * GCS Credentials
 *
 * Currently only supports Service Account Key
 * Example of a key:
 * ```json
 * {
 * "type": "service_account",
 * "project_id": "example-project-1234",
 * "private_key_id": "....",
 * "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
 * "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
 * "client_id": "123456789012345678901",
 * "auth_uri": "https://accounts.google.com/o/oauth2/auth",
 * "token_uri": "https://oauth2.googleapis.com/token",
 * "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
 * "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
 * "universe_domain": "googleapis.com"
 * }
 * ```
 */
export type GcsCredential = {
    'credential-type': 'service-account-key';
    key: GcsServiceKey;
};

export type credential_type2 = 'service-account-key';

export type GcsProfile = {
    /**
     * Name of the GCS bucket
     */
    bucket: string;
    /**
     * Subpath in the bucket to use.
     * The same prefix can be used for multiple warehouses.
     */
    'key-prefix'?: (string) | null;
};

export type GcsServiceKey = {
    auth_provider_x509_cert_url: string;
    auth_uri: string;
    client_email: string;
    client_id: string;
    client_x509_cert_url: string;
    private_key: string;
    private_key_id: string;
    project_id: string;
    token_uri: string;
    type: string;
    universe_domain: string;
};

export type GetNamespaceAccessResponse = {
    'allowed-actions': Array<NamespaceAction>;
};

export type GetNamespaceAssignmentsResponse = {
    assignments: Array<NamespaceAssignment>;
};

export type GetNamespaceAuthPropertiesResponse = {
    'managed-access': boolean;
    'managed-access-inherited': boolean;
};

export type GetProjectAccessResponse = {
    'allowed-actions': Array<ProjectAction>;
};

export type GetProjectAssignmentsResponse = {
    assignments: Array<ProjectAssignment>;
    'project-id': string;
};

export type GetProjectResponse = {
    /**
     * ID of the project.
     */
    'project-id': string;
    /**
     * Name of the project
     */
    'project-name': string;
};

export type GetRoleAccessResponse = {
    'allowed-actions': Array<RoleAction>;
};

export type GetRoleAssignmentsResponse = {
    assignments: Array<RoleAssignment>;
};

export type GetServerAccessResponse = {
    'allowed-actions': Array<ServerAction>;
};

export type GetServerAssignmentsResponse = {
    assignments: Array<ServerAssignment>;
};

export type GetTableAccessResponse = {
    'allowed-actions': Array<TableAction>;
};

export type GetTableAssignmentsResponse = {
    assignments: Array<TableAssignment>;
};

export type GetViewAccessResponse = {
    'allowed-actions': Array<ViewAction>;
};

export type GetViewAssignmentsResponse = {
    assignments: Array<ViewAssignment>;
};

export type GetWarehouseAccessResponse = {
    'allowed-actions': Array<WarehouseAction>;
};

export type GetWarehouseAssignmentsResponse = {
    assignments: Array<WarehouseAssignment>;
};

export type GetWarehouseAuthPropertiesResponse = {
    'managed-access': boolean;
};

export type GetWarehouseResponse = {
    /**
     * Delete profile used for the warehouse.
     */
    'delete-profile': TabularDeleteProfile;
    /**
     * ID of the warehouse.
     */
    id: string;
    /**
     * Name of the warehouse.
     */
    name: string;
    /**
     * Project ID in which the warehouse is created.
     */
    'project-id': string;
    /**
     * Whether the warehouse is active.
     */
    status: WarehouseStatus;
    /**
     * Storage profile used for the warehouse.
     */
    'storage-profile': StorageProfile;
};

/**
 * JSON wrapper for all error responses (non-2xx)
 */
export type IcebergErrorResponse = {
    error: ErrorModel;
};

export type ListDeletedTabularsResponse = {
    /**
     * Token to fetch the next page
     */
    next_page_token?: (string) | null;
    /**
     * List of tabulars
     */
    tabulars: Array<DeletedTabularResponse>;
};

export type ListProjectsResponse = {
    /**
     * List of projects
     */
    projects: Array<GetProjectResponse>;
};

export type ListRolesResponse = {
    next_page_token?: (string) | null;
    roles: Array<Role>;
};

export type ListUsersResponse = {
    next_page_token?: (string) | null;
    users: Array<User>;
};

export type ListWarehousesResponse = {
    /**
     * List of warehouses in the project.
     */
    warehouses: Array<GetWarehouseResponse>;
};

export type NamespaceAction = 'create_table' | 'create_view' | 'create_namespace' | 'delete' | 'update_properties' | 'get_metadata' | 'read_assignments' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_pass_grants' | 'grant_manage_grants';

export type NamespaceAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

export type type = 'ownership';

/**
 * Identifier for a namespace, either a UUID or its name and warehouse ID
 */
export type NamespaceIdentOrUuid = {
    'namespace-id': string;
} | {
    namespace: Array<(string)>;
    'warehouse-id': string;
};

export type NamespaceRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'create' | 'modify';

export type ProjectAction = 'create_warehouse' | 'delete' | 'rename' | 'list_warehouses' | 'create_role' | 'list_roles' | 'search_roles' | 'read_assignments' | 'grant_role_creator' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_project_admin' | 'grant_security_admin' | 'grant_data_admin';

export type ProjectAssignment = (UserOrRole & {
    type: 'project_admin';
}) | (UserOrRole & {
    type: 'security_admin';
}) | (UserOrRole & {
    type: 'data_admin';
}) | (UserOrRole & {
    type: 'role_creator';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

export type type2 = 'project_admin';

export type ProjectRelation = 'project_admin' | 'security_admin' | 'data_admin' | 'role_creator' | 'describe' | 'select' | 'create' | 'modify';

export type RenameProjectRequest = {
    /**
     * New name for the project.
     */
    'new-name': string;
    /**
     * Optional project ID.
     * Only required if the project ID cannot be inferred and no default project is set.
     */
    'project-id'?: (string) | null;
};

export type RenameWarehouseRequest = {
    /**
     * New name for the warehouse.
     */
    'new-name': string;
};

export type Role = {
    /**
     * Timestamp when the role was created
     */
    'created-at': string;
    /**
     * Description of the role
     */
    description?: (string) | null;
    /**
     * Globally unique id of this role
     */
    id: string;
    /**
     * Name of the role
     */
    name: string;
    /**
     * Project ID in which the role is created.
     */
    'project-id': string;
    /**
     * Timestamp when the role was last updated
     */
    'updated-at'?: (string) | null;
};

export type RoleAction = 'assume' | 'can_grant_assignee' | 'can_change_ownership' | 'delete' | 'update' | 'read' | 'read_assignments';

export type RoleAssignment = (UserOrRole & {
    type: 'assignee';
}) | (UserOrRole & {
    type: 'ownership';
});

export type type3 = 'assignee';

export type RoleRelation = 'assignee' | 'ownership';

export type S3Credential = {
    'aws-access-key-id': string;
    'aws-secret-access-key': string;
    'credential-type': 'access-key';
};

export type credential_type3 = 'access-key';

export type S3Flavor = 'aws' | 's3-compat';

export type S3Profile = {
    /**
     * Allow `s3a://` and `s3n://` in locations.
     * This is disabled by default. We do not recommend to use this setting
     * except for migration of old hadoop-based tables via the register endpoint.
     * Tables with `s3a` paths are not accessible outside the Java ecosystem.
     */
    'allow-alternative-protocols'?: (boolean) | null;
    /**
     * Optional ARN to assume when accessing the bucket
     */
    'assume-role-arn'?: (string) | null;
    /**
     * Name of the S3 bucket
     */
    bucket: string;
    /**
     * Optional endpoint to use for S3 requests, if not provided
     * the region will be used to determine the endpoint.
     * If both region and endpoint are provided, the endpoint will be used.
     * Example: `http://s3-de.my-domain.com:9000`
     */
    endpoint?: (string) | null;
    /**
     * S3 flavor to use.
     * Defaults to AWS
     */
    flavor?: S3Flavor;
    /**
     * Subpath in the bucket to use.
     * The same prefix can be used for multiple warehouses.
     */
    'key-prefix'?: (string) | null;
    /**
     * Path style access for S3 requests.
     * If the underlying S3 supports both, we recommend to not set `path_style_access`.
     */
    'path-style-access'?: (boolean) | null;
    /**
     * Region to use for S3 requests.
     */
    region: string;
    'sts-enabled': boolean;
    /**
     * Optional role ARN to assume for sts vended-credentials
     */
    'sts-role-arn'?: (string) | null;
};

export type SearchRoleRequest = {
    /**
     * Deprecated: Please use the x-project-id header instead.
     * Project ID in which the role is created.
     * Only required if the project ID cannot be inferred from the
     * users token and no default project is set.
     */
    'project-id'?: (string) | null;
    /**
     * Search string for fuzzy search.
     * Length is truncated to 64 characters.
     */
    search: string;
};

export type SearchRoleResponse = {
    /**
     * List of users matching the search criteria
     */
    roles: Array<Role>;
};

export type SearchUser = {
    /**
     * Email of the user. If id is not specified, the email is extracted
     * from the provided token.
     */
    email?: (string) | null;
    /**
     * ID of the user
     */
    id: string;
    /**
     * Name of the user
     */
    name: string;
    /**
     * Type of the user
     */
    'user-type': UserType;
};

export type SearchUserRequest = {
    /**
     * Search string for fuzzy search.
     * Length is truncated to 64 characters.
     */
    search: string;
};

/**
 * Search result for users
 */
export type SearchUserResponse = {
    /**
     * List of users matching the search criteria
     */
    users: Array<SearchUser>;
};

export type ServerAction = 'create_project' | 'update_users' | 'delete_users' | 'list_users' | 'grant_admin' | 'provision_users' | 'read_assignments';

export type ServerAssignment = (UserOrRole & {
    type: 'admin';
}) | (UserOrRole & {
    type: 'operator';
});

export type type4 = 'admin';

export type ServerInfo = {
    /**
     * `AuthZ` backend in use.
     */
    'authz-backend': AuthZBackend;
    /**
     * Whether the catalog has been bootstrapped.
     */
    bootstrapped: boolean;
    /**
     * Default Project ID. Null if not set
     */
    'default-project-id': string;
    /**
     * ID of the server.
     */
    'server-id': string;
    /**
     * Version of the server.
     */
    version: string;
};

export type ServerRelation = 'admin' | 'operator';

export type SetManagedAccessRequest = {
    'managed-access': boolean;
};

/**
 * Storage secret for a warehouse.
 */
export type StorageCredential = (S3Credential & {
    type: 's3';
}) | (AzCredential & {
    type: 'az';
}) | (GcsCredential & {
    type: 'gcs';
});

export type type5 = 's3';

/**
 * Storage profile for a warehouse.
 */
export type StorageProfile = (AdlsProfile & {
    type: 'adls';
}) | (S3Profile & {
    type: 's3';
}) | (GcsProfile & {
    type: 'gcs';
});

export type type6 = 'adls';

export type TableAction = 'drop' | 'write_data' | 'read_data' | 'get_metadata' | 'commit' | 'rename' | 'read_assignments' | 'grant_pass_grants' | 'grant_manage_grants' | 'grant_describe' | 'grant_select' | 'grant_modify' | 'change_ownership';

export type TableAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'modify';
});

export type TableRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'modify';

export type TabularDeleteProfile = {
    type: 'hard';
} | {
    'expiration-seconds': number;
    type: 'soft';
};

export type type7 = 'hard';

/**
 * Identifier for a table or view, either a UUID or its name and namespace
 */
export type TabularIdentOrUuid = {
    'table-id': string;
} | {
    namespace: Array<(string)>;
    /**
     * Name of the table or view
     */
    table: string;
    'warehouse-id': string;
};

export type TabularIdentUuid = {
    id: string;
    type: 'table';
} | {
    id: string;
    type: 'view';
};

export type type8 = 'table';

/**
 * Type of tabular
 */
export type TabularType = 'table' | 'view';

export type UndropTabularsRequest = {
    /**
     * Tabulars to undrop
     */
    targets: Array<TabularIdentUuid>;
};

export type UpdateNamespaceAssignmentsRequest = {
    deletes?: Array<NamespaceAssignment>;
    writes?: Array<NamespaceAssignment>;
};

export type UpdateProjectAssignmentsRequest = {
    deletes?: Array<ProjectAssignment>;
    writes?: Array<ProjectAssignment>;
};

export type UpdateRoleAssignmentsRequest = {
    deletes?: Array<RoleAssignment>;
    writes?: Array<RoleAssignment>;
};

export type UpdateRoleRequest = {
    /**
     * Description of the role. If not set, the description will be removed.
     */
    description?: (string) | null;
    /**
     * Name of the role to create
     */
    name: string;
};

export type UpdateServerAssignmentsRequest = {
    deletes?: Array<ServerAssignment>;
    writes?: Array<ServerAssignment>;
};

export type UpdateTableAssignmentsRequest = {
    deletes?: Array<TableAssignment>;
    writes?: Array<TableAssignment>;
};

export type UpdateUserRequest = {
    email?: (string) | null;
    name: string;
    user_type: UserType;
};

export type UpdateViewAssignmentsRequest = {
    deletes?: Array<ViewAssignment>;
    writes?: Array<ViewAssignment>;
};

export type UpdateWarehouseAssignmentsRequest = {
    deletes?: Array<WarehouseAssignment>;
    writes?: Array<WarehouseAssignment>;
};

export type UpdateWarehouseCredentialRequest = {
    'new-storage-credential'?: (null | StorageCredential);
};

export type UpdateWarehouseDeleteProfileRequest = {
    'delete-profile': TabularDeleteProfile;
};

export type UpdateWarehouseStorageRequest = {
    'storage-credential'?: (null | StorageCredential);
    /**
     * Storage profile to use for the warehouse.
     * The new profile must point to the same location as the existing profile
     * to avoid data loss. For S3 this means that you may not change the
     * bucket, key prefix, or region.
     */
    'storage-profile': StorageProfile;
};

/**
 * User of the catalog
 */
export type User = {
    /**
     * Timestamp when the user was created
     */
    'created-at': string;
    /**
     * Email of the user
     */
    email?: (string) | null;
    /**
     * The user's ID
     */
    id: string;
    /**
     * The endpoint that last updated the user
     */
    'last-updated-with': UserLastUpdatedWith;
    /**
     * Name of the user
     */
    name: string;
    /**
     * Timestamp when the user was last updated
     */
    'updated-at'?: (string) | null;
    /**
     * Type of the user
     */
    'user-type': UserType;
};

/**
 * How the user was last updated
 */
export type UserLastUpdatedWith = 'create-endpoint' | 'config-call-creation' | 'update-endpoint';

/**
 * Identifies a user or a role
 */
export type UserOrRole = {
    /**
     * Id of the user
     */
    user: string;
} | {
    /**
     * Id of the role
     */
    role: string;
};

/**
 * Type of a User
 */
export type UserType = 'human' | 'application';

export type ViewAction = 'drop' | 'commit' | 'get_metadata' | 'rename' | 'read_assignments' | 'grant_pass_grants' | 'grant_manage_grants' | 'grant_describe' | 'grant_modify' | 'change_ownership';

export type ViewAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'modify';
});

export type ViewRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'modify';

export type WarehouseAction = 'create_namespace' | 'delete' | 'modify_storage' | 'modify_storage_credential' | 'get_config' | 'get_metadata' | 'list_namespaces' | 'include_in_list' | 'deactivate' | 'activate' | 'rename' | 'list_deleted_tabulars' | 'read_assignments' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_pass_grants' | 'grant_manage_grants' | 'change_ownership';

export type WarehouseAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

export type WarehouseRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'create' | 'modify';

/**
 * Status of a warehouse
 */
export type WarehouseStatus = 'active' | 'inactive';

export type BootstrapData = {
    body: BootstrapRequest;
};

export type BootstrapResponse = (void);

export type BootstrapError = (IcebergErrorResponse);

export type GetDefaultProjectResponse = (GetProjectResponse);

export type GetDefaultProjectError = (IcebergErrorResponse);

export type DeleteDefaultProjectResponse = (void);

export type DeleteDefaultProjectError = (IcebergErrorResponse);

export type RenameDefaultProjectData = {
    body: RenameProjectRequest;
};

export type RenameDefaultProjectResponse = (unknown);

export type RenameDefaultProjectError = (IcebergErrorResponse);

export type GetServerInfoResponse = (ServerInfo);

export type GetServerInfoError = (IcebergErrorResponse);

export type CheckData = {
    body: CheckRequest;
};

export type CheckResponse2 = (CheckResponse);

export type CheckError = unknown;

export type GetNamespaceByIdData = {
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
};

export type GetNamespaceByIdResponse = (GetNamespaceAuthPropertiesResponse);

export type GetNamespaceByIdError = unknown;

export type GetNamespaceAccessByIdData = {
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetNamespaceAccessByIdResponse = (GetNamespaceAccessResponse);

export type GetNamespaceAccessByIdError = unknown;

export type GetNamespaceAssignmentsByIdData = {
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<NamespaceRelation>;
    };
};

export type GetNamespaceAssignmentsByIdResponse = (GetNamespaceAssignmentsResponse);

export type GetNamespaceAssignmentsByIdError = unknown;

export type UpdateNamespaceAssignmentsByIdData = {
    body: UpdateNamespaceAssignmentsRequest;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
};

export type UpdateNamespaceAssignmentsByIdResponse = (void);

export type UpdateNamespaceAssignmentsByIdError = unknown;

export type SetNamespaceManagedAccessData = {
    body: SetManagedAccessRequest;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
};

export type SetNamespaceManagedAccessResponse = (unknown);

export type SetNamespaceManagedAccessError = unknown;

export type GetProjectAccessData = {
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetProjectAccessResponse2 = (GetProjectAccessResponse);

export type GetProjectAccessError = unknown;

export type GetProjectAssignmentsData = {
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ProjectRelation>;
    };
};

export type GetProjectAssignmentsResponse2 = (GetProjectAssignmentsResponse);

export type GetProjectAssignmentsError = unknown;

export type UpdateProjectAssignmentsData = {
    body: UpdateProjectAssignmentsRequest;
};

export type UpdateProjectAssignmentsResponse = (void);

export type UpdateProjectAssignmentsError = unknown;

export type GetProjectAccessByIdData = {
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetProjectAccessByIdResponse = (GetProjectAccessResponse);

export type GetProjectAccessByIdError = unknown;

export type GetProjectAssignmentsByIdData = {
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ProjectRelation>;
    };
};

export type GetProjectAssignmentsByIdResponse = (GetProjectAssignmentsResponse);

export type GetProjectAssignmentsByIdError = unknown;

export type UpdateProjectAssignmentsByIdData = {
    body: UpdateProjectAssignmentsRequest;
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
};

export type UpdateProjectAssignmentsByIdResponse = (void);

export type UpdateProjectAssignmentsByIdError = unknown;

export type GetRoleAccessByIdData = {
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
};

export type GetRoleAccessByIdResponse = (GetRoleAccessResponse);

export type GetRoleAccessByIdError = unknown;

export type GetRoleAssignmentsByIdData = {
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<RoleRelation>;
    };
};

export type GetRoleAssignmentsByIdResponse = (GetRoleAssignmentsResponse);

export type GetRoleAssignmentsByIdError = unknown;

export type UpdateRoleAssignmentsByIdData = {
    body: UpdateRoleAssignmentsRequest;
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
};

export type UpdateRoleAssignmentsByIdResponse = (void);

export type UpdateRoleAssignmentsByIdError = unknown;

export type GetServerAccessData = {
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetServerAccessResponse2 = (GetServerAccessResponse);

export type GetServerAccessError = unknown;

export type GetServerAssignmentsData = {
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ServerRelation>;
    };
};

export type GetServerAssignmentsResponse2 = (GetServerAssignmentsResponse);

export type GetServerAssignmentsError = unknown;

export type UpdateServerAssignmentsData = {
    body: UpdateServerAssignmentsRequest;
};

export type UpdateServerAssignmentsResponse = (void);

export type UpdateServerAssignmentsError = unknown;

export type GetTableAccessByIdData = {
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetTableAccessByIdResponse = (GetTableAccessResponse);

export type GetTableAccessByIdError = unknown;

export type GetTableAssignmentsByIdData = {
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<TableRelation>;
    };
};

export type GetTableAssignmentsByIdResponse = (GetTableAssignmentsResponse);

export type GetTableAssignmentsByIdError = unknown;

export type UpdateTableAssignmentsByIdData = {
    body: UpdateTableAssignmentsRequest;
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
};

export type UpdateTableAssignmentsByIdResponse = (void);

export type UpdateTableAssignmentsByIdError = unknown;

export type GetViewAccessByIdData = {
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetViewAccessByIdResponse = (GetViewAccessResponse);

export type GetViewAccessByIdError = unknown;

export type GetViewAssignmentsByIdData = {
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ViewRelation>;
    };
};

export type GetViewAssignmentsByIdResponse = (GetViewAssignmentsResponse);

export type GetViewAssignmentsByIdError = unknown;

export type UpdateViewAssignmentsByIdData = {
    body: UpdateViewAssignmentsRequest;
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
};

export type UpdateViewAssignmentsByIdResponse = (void);

export type UpdateViewAssignmentsByIdError = unknown;

export type GetWarehouseByIdData = {
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
};

export type GetWarehouseByIdResponse = (GetWarehouseAuthPropertiesResponse);

export type GetWarehouseByIdError = unknown;

export type GetWarehouseAccessByIdData = {
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
};

export type GetWarehouseAccessByIdResponse = (GetWarehouseAccessResponse);

export type GetWarehouseAccessByIdError = unknown;

export type GetWarehouseAssignmentsByIdData = {
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<WarehouseRelation>;
    };
};

export type GetWarehouseAssignmentsByIdResponse = (GetWarehouseAssignmentsResponse);

export type GetWarehouseAssignmentsByIdError = unknown;

export type UpdateWarehouseAssignmentsByIdData = {
    body: UpdateWarehouseAssignmentsRequest;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
};

export type UpdateWarehouseAssignmentsByIdResponse = (void);

export type UpdateWarehouseAssignmentsByIdError = unknown;

export type SetWarehouseManagedAccessData = {
    body: SetManagedAccessRequest;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
};

export type SetWarehouseManagedAccessResponse = (unknown);

export type SetWarehouseManagedAccessError = unknown;

export type CreateProjectData = {
    body: CreateProjectRequest;
};

export type CreateProjectResponse2 = (CreateProjectResponse);

export type CreateProjectError = (IcebergErrorResponse);

export type ListProjectsResponse2 = (ListProjectsResponse);

export type ListProjectsError = (IcebergErrorResponse);

export type GetProjectByIdData = {
    path: {
        project_id: string;
    };
};

export type GetProjectByIdResponse = (GetProjectResponse);

export type GetProjectByIdError = (IcebergErrorResponse);

export type DeleteProjectByIdData = {
    path: {
        project_id: string;
    };
};

export type DeleteProjectByIdResponse = (void);

export type DeleteProjectByIdError = (IcebergErrorResponse);

export type RenameProjectByIdData = {
    body: RenameProjectRequest;
    path: {
        project_id: string;
    };
};

export type RenameProjectByIdResponse = (unknown);

export type RenameProjectByIdError = (IcebergErrorResponse);

export type ListRolesData = {
    query?: {
        /**
         * Search for a specific role name
         */
        name?: (string) | null;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
        /**
         * Next page token
         */
        pageToken?: (string) | null;
        /**
         * Project ID from which roles should be listed
         * Only required if the project ID cannot be inferred from the
         * users token and no default project is set.
         */
        projectId?: string;
    };
};

export type ListRolesResponse2 = (ListRolesResponse);

export type ListRolesError = (IcebergErrorResponse);

export type CreateRoleData = {
    body: CreateRoleRequest;
};

export type CreateRoleResponse = (Role);

export type CreateRoleError = (IcebergErrorResponse);

export type GetRoleData = {
    path: {
        id: string;
    };
};

export type GetRoleResponse = (Role);

export type GetRoleError = (IcebergErrorResponse);

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        id: string;
    };
};

export type UpdateRoleResponse = (Role);

export type UpdateRoleError = (IcebergErrorResponse);

export type DeleteRoleData = {
    path: {
        id: string;
    };
};

export type DeleteRoleResponse = (void);

export type DeleteRoleError = (IcebergErrorResponse);

export type SearchRoleData = {
    body: SearchRoleRequest;
};

export type SearchRoleResponse2 = (SearchRoleResponse);

export type SearchRoleError = (IcebergErrorResponse);

export type SearchUserData = {
    body: SearchUserRequest;
};

export type SearchUserResponse2 = (SearchUserResponse);

export type SearchUserError = (IcebergErrorResponse);

export type ListUserData = {
    query?: {
        /**
         * Search for a specific username
         */
        name?: (string) | null;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
        /**
         * Next page token
         */
        pageToken?: (string) | null;
    };
};

export type ListUserResponse = (ListUsersResponse);

export type ListUserError = (IcebergErrorResponse);

export type CreateUserData = {
    body: CreateUserRequest;
};

export type CreateUserResponse = (User);

export type CreateUserError = (IcebergErrorResponse);

export type GetUserData = {
    path: {
        id: string;
    };
};

export type GetUserResponse = (User);

export type GetUserError = (IcebergErrorResponse);

export type UpdateUserData = {
    body: UpdateUserRequest;
    path: {
        id: string;
    };
};

export type UpdateUserResponse = (unknown);

export type UpdateUserError = (IcebergErrorResponse);

export type DeleteUserData = {
    path: {
        id: string;
    };
};

export type DeleteUserResponse = (void);

export type DeleteUserError = (IcebergErrorResponse);

export type ListWarehousesData = {
    query?: {
        /**
         * The project ID to list warehouses for.
         * Setting a warehouse is required.
         */
        projectId?: (string) | null;
        /**
         * Optional filter to return only warehouses
         * with the specified status.
         * If not provided, only active warehouses are returned.
         */
        warehouseStatus?: Array<WarehouseStatus>;
    };
};

export type ListWarehousesResponse2 = (ListWarehousesResponse);

export type ListWarehousesError = (IcebergErrorResponse);

export type CreateWarehouseData = {
    body: CreateWarehouseRequest;
};

export type CreateWarehouseResponse2 = (CreateWarehouseResponse);

export type CreateWarehouseError = (IcebergErrorResponse);

export type GetWarehouseData = {
    path: {
        warehouse_id: string;
    };
};

export type GetWarehouseResponse2 = (GetWarehouseResponse);

export type GetWarehouseError = (IcebergErrorResponse);

export type DeleteWarehouseData = {
    path: {
        warehouse_id: string;
    };
};

export type DeleteWarehouseResponse = (void);

export type DeleteWarehouseError = (IcebergErrorResponse);

export type ActivateWarehouseData = {
    path: {
        warehouse_id: string;
    };
};

export type ActivateWarehouseResponse = (unknown);

export type ActivateWarehouseError = (IcebergErrorResponse);

export type DeactivateWarehouseData = {
    path: {
        warehouse_id: string;
    };
};

export type DeactivateWarehouseResponse = (unknown);

export type DeactivateWarehouseError = (IcebergErrorResponse);

export type UpdateWarehouseDeleteProfileData = {
    body: UpdateWarehouseDeleteProfileRequest;
    path: {
        warehouse_id: string;
    };
};

export type UpdateWarehouseDeleteProfileResponse = (unknown);

export type UpdateWarehouseDeleteProfileError = (IcebergErrorResponse);

export type ListDeletedTabularsData = {
    path: {
        warehouse_id: string;
    };
    query?: {
        /**
         * Filter by Namespace ID
         */
        namespaceId?: string;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
        /**
         * Next page token
         */
        pageToken?: (string) | null;
    };
};

export type ListDeletedTabularsResponse2 = (ListDeletedTabularsResponse);

export type ListDeletedTabularsError = (IcebergErrorResponse);

export type UndropTabularsData = {
    body: UndropTabularsRequest;
    path: {
        warehouse_id: string;
    };
};

export type UndropTabularsResponse = (void);

export type UndropTabularsError = (IcebergErrorResponse);

export type RenameWarehouseData = {
    body: RenameWarehouseRequest;
    path: {
        warehouse_id: string;
    };
};

export type RenameWarehouseResponse = (unknown);

export type RenameWarehouseError = (IcebergErrorResponse);

export type UpdateStorageProfileData = {
    body: UpdateWarehouseStorageRequest;
    path: {
        warehouse_id: string;
    };
};

export type UpdateStorageProfileResponse = (unknown);

export type UpdateStorageProfileError = (IcebergErrorResponse);

export type UpdateStorageCredentialData = {
    body: UpdateWarehouseCredentialRequest;
    path: {
        warehouse_id: string;
    };
};

export type UpdateStorageCredentialResponse = (unknown);

export type UpdateStorageCredentialError = (IcebergErrorResponse);

export type WhoamiResponse = (User);

export type WhoamiError = (IcebergErrorResponse);