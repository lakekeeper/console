// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { BootstrapData, BootstrapResponse, BootstrapError, DeleteDefaultProjectData, DeleteDefaultProjectResponse, DeleteDefaultProjectError, GetDefaultProjectData, GetDefaultProjectResponse, GetDefaultProjectError, RenameDefaultProjectData, RenameDefaultProjectError, GetEndpointStatisticsData, GetEndpointStatisticsResponse, GetEndpointStatisticsError, GetServerInfoData, GetServerInfoResponse, GetServerInfoError, CheckData, CheckResponse2, GetNamespaceByIdData, GetNamespaceByIdResponse, GetNamespaceAccessByIdData, GetNamespaceAccessByIdResponse, GetNamespaceAssignmentsByIdData, GetNamespaceAssignmentsByIdResponse, UpdateNamespaceAssignmentsByIdData, UpdateNamespaceAssignmentsByIdResponse, SetNamespaceManagedAccessData, GetProjectAccessData, GetProjectAccessResponse2, GetProjectAssignmentsData, GetProjectAssignmentsResponse2, UpdateProjectAssignmentsData, UpdateProjectAssignmentsResponse, GetProjectAccessByIdData, GetProjectAccessByIdResponse, GetProjectAssignmentsByIdData, GetProjectAssignmentsByIdResponse, UpdateProjectAssignmentsByIdData, UpdateProjectAssignmentsByIdResponse, GetRoleAccessByIdData, GetRoleAccessByIdResponse, GetRoleAssignmentsByIdData, GetRoleAssignmentsByIdResponse, UpdateRoleAssignmentsByIdData, UpdateRoleAssignmentsByIdResponse, GetServerAccessData, GetServerAccessResponse2, GetServerAssignmentsData, GetServerAssignmentsResponse2, UpdateServerAssignmentsData, UpdateServerAssignmentsResponse, GetTableAccessByIdData, GetTableAccessByIdResponse, GetTableAssignmentsByIdData, GetTableAssignmentsByIdResponse, UpdateTableAssignmentsByIdData, UpdateTableAssignmentsByIdResponse, GetViewAccessByIdData, GetViewAccessByIdResponse, GetViewAssignmentsByIdData, GetViewAssignmentsByIdResponse, UpdateViewAssignmentsByIdData, UpdateViewAssignmentsByIdResponse, GetWarehouseByIdData, GetWarehouseByIdResponse, GetWarehouseAccessByIdData, GetWarehouseAccessByIdResponse, GetWarehouseAssignmentsByIdData, GetWarehouseAssignmentsByIdResponse, UpdateWarehouseAssignmentsByIdData, UpdateWarehouseAssignmentsByIdResponse, SetWarehouseManagedAccessData, CreateProjectData, CreateProjectResponse2, CreateProjectError, ListProjectsData, ListProjectsResponse2, ListProjectsError, DeleteProjectByIdData, DeleteProjectByIdResponse, DeleteProjectByIdError, GetProjectByIdData, GetProjectByIdResponse, GetProjectByIdError, RenameProjectByIdData, RenameProjectByIdError, ListRolesData, ListRolesResponse2, ListRolesError, CreateRoleData, CreateRoleResponse, CreateRoleError, DeleteRoleData, DeleteRoleResponse, DeleteRoleError, GetRoleData, GetRoleResponse, GetRoleError, UpdateRoleData, UpdateRoleResponse, UpdateRoleError, SearchRoleData, SearchRoleResponse2, SearchRoleError, SearchUserData, SearchUserResponse2, SearchUserError, ListUserData, ListUserResponse, ListUserError, CreateUserData, CreateUserResponse, CreateUserError, DeleteUserData, DeleteUserResponse, DeleteUserError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserError, ListWarehousesData, ListWarehousesResponse2, ListWarehousesError, CreateWarehouseData, CreateWarehouseResponse2, CreateWarehouseError, DeleteWarehouseData, DeleteWarehouseResponse, DeleteWarehouseError, GetWarehouseData, GetWarehouseResponse2, GetWarehouseError, ActivateWarehouseData, ActivateWarehouseError, DeactivateWarehouseData, DeactivateWarehouseError, UpdateWarehouseDeleteProfileData, UpdateWarehouseDeleteProfileError, ListDeletedTabularsData, ListDeletedTabularsResponse2, ListDeletedTabularsError, UndropTabularsData, UndropTabularsResponse, UndropTabularsError, UndropTabularsDeprecatedData, UndropTabularsDeprecatedResponse, UndropTabularsDeprecatedError, GetNamespaceProtectionData, GetNamespaceProtectionResponse, GetNamespaceProtectionError, SetNamespaceProtectionData, SetNamespaceProtectionResponse, SetNamespaceProtectionError, SetWarehouseProtectionData, SetWarehouseProtectionResponse, SetWarehouseProtectionError, RenameWarehouseData, RenameWarehouseError, GetWarehouseStatisticsData, GetWarehouseStatisticsResponse, GetWarehouseStatisticsError, UpdateStorageProfileData, UpdateStorageProfileError, UpdateStorageCredentialData, UpdateStorageCredentialError, GetTableProtectionData, GetTableProtectionResponse, GetTableProtectionError, SetTableProtectionData, SetTableProtectionResponse, SetTableProtectionError, GetViewProtectionData, GetViewProtectionResponse, GetViewProtectionError, SetViewProtectionData, SetViewProtectionResponse, SetViewProtectionError, WhoamiData, WhoamiResponse, WhoamiError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Creates the user in the catalog if it does not exist.
 * If the user exists, it updates the users' metadata from the token.
 * The token sent to this endpoint should have "profile" and "email" scopes.
 */
export const bootstrap = <ThrowOnError extends boolean = false>(options: Options<BootstrapData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BootstrapResponse, BootstrapError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/bootstrap',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete the default project
 */
export const deleteDefaultProject = <ThrowOnError extends boolean = false>(options?: Options<DeleteDefaultProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteDefaultProjectResponse, DeleteDefaultProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/default-project',
        ...options
    });
};

/**
 * Get the default project
 */
export const getDefaultProject = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultProjectResponse, GetDefaultProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/default-project',
        ...options
    });
};

/**
 * Rename the default project
 */
export const renameDefaultProject = <ThrowOnError extends boolean = false>(options: Options<RenameDefaultProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RenameDefaultProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/default-project/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve API Usage Statistics
 * Returns detailed endpoint call statistics for your project, allowing you to monitor API usage patterns,
 * track frequency of operations, and analyze response codes.
 *
 * ## Data Collection
 *
 * The statistics include:
 * - Endpoint paths and HTTP methods
 * - Response status codes
 * - Call counts per endpoint
 * - Warehouse context (when applicable)
 * - Timestamps of activity
 *
 * ## Time Aggregation
 *
 * Statistics are aggregated hourly. Within each hour window:
 * - An initial entry is created on the first API call
 * - Subsequent calls update the existing hourly entry
 * - Each hour boundary creates a new aggregation bucket
 * - Hours with no API activity have no entries (gaps in data)
 *
 * ## Response Format
 *
 * The response includes timestamp buckets (in UTC) and corresponding endpoint metrics,
 * allowing for time-series analysis of API usage patterns.
 *
 * Example:
 * - 00:00:00-00:16:32: no activity
 * - timestamps: []
 * - 00:16:32: warehouse created:
 * - timestamps: ["01:00:00"], called_endpoints: [[{"count": 1, "http_route": "POST /management/v1/warehouse", "status_code": 201, "warehouse_id": null, "warehouse_name": null, "created_at": "00:16:32", "updated_at": null}]]
 * - 00:30:00: table created:
 * - timestamps: ["01:00:00"], called_endpoints: [[{"count": 1, "http_route": "POST /management/v1/warehouse", "status_code": 201, "warehouse_id": null, "warehouse_name": null, "created_at": "00:16:32", "updated_at": null},
 * {"count": 1, "http_route": "POST /catalog/v1/{prefix}/namespaces/{namespace}/tables", "status_code": 201, "warehouse_id": "ff17f1d0-90ad-4e7d-bf02-be718b78c2ee", "warehouse_name": "staging", "created_at": "00:30:00", "updated_at": null}]]
 * - 00:45:00: table created:
 * - timestamps: ["01:00:00"], called_endpoints: [[{"count": 1, "http_route": "POST /management/v1/warehouse", "status_code": 201, "warehouse_id": null, "warehouse_name": null, "created_at": "00:16:32", "updated_at": null},
 * {"count": 1, "http_route": "POST /catalog/v1/{prefix}/namespaces/{namespace}/tables", "status_code": 201, "warehouse_id": "ff17f1d0-90ad-4e7d-bf02-be718b78c2ee", "warehouse_name": "staging", "created_at": "00:30:00", "updated_at": "00:45:00"}]]
 * - 01:00:36: table deleted:
 * - timestamps: ["01:00:00","02:00:00"], called_endpoints: [[{"count": 1, "http_route": "POST /management/v1/warehouse", "status_code": 201, "warehouse_id": null, "warehouse_name": null, "created_at": "00:16:32", "updated_at": null},
 * {"count": 1, "http_route": "POST /catalog/v1/{prefix}/namespaces/{namespace}/tables", "status_code": 201, "warehouse_id": "ff17f1d0-90ad-4e7d-bf02-be718b78c2ee", "warehouse_name": "staging", "created_at": "00:30:00", "updated_at": "00:45:00"}],
 * [{"count": 1, "http_route": "DELETE /catalog/v1/{prefix}/namespaces/{namespace}/tables/{table}", "status_code": 200, "warehouse_id": "ff17f1d0-90ad-4e7d-bf02-be718b78c2ee", "warehouse_name": "staging", "created_at": "01:00:36", "updated_at": "null"}]]
 */
export const getEndpointStatistics = <ThrowOnError extends boolean = false>(options: Options<GetEndpointStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetEndpointStatisticsResponse, GetEndpointStatisticsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/endpoint-statistics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get information about the server
 */
export const getServerInfo = <ThrowOnError extends boolean = false>(options?: Options<GetServerInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerInfoResponse, GetServerInfoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/info',
        ...options
    });
};

/**
 * Check if a specific action is allowed on the given object
 */
export const check = <ThrowOnError extends boolean = false>(options: Options<CheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CheckResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/check',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Authorization properties of a namespace
 */
export const getNamespaceById = <ThrowOnError extends boolean = false>(options: Options<GetNamespaceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNamespaceByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/namespace/{namespace_id}',
        ...options
    });
};

/**
 * Get my access to a namespace
 */
export const getNamespaceAccessById = <ThrowOnError extends boolean = false>(options: Options<GetNamespaceAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNamespaceAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/namespace/{namespace_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments for a namespace
 */
export const getNamespaceAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetNamespaceAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNamespaceAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/namespace/{namespace_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a namespace
 */
export const updateNamespaceAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateNamespaceAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateNamespaceAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/namespace/{namespace_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set managed access property of a namespace
 */
export const setNamespaceManagedAccess = <ThrowOnError extends boolean = false>(options: Options<SetNamespaceManagedAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/namespace/{namespace_id}/managed-access',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to the default project
 */
export const getProjectAccess = <ThrowOnError extends boolean = false>(options?: Options<GetProjectAccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectAccessResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/access',
        ...options
    });
};

/**
 * Get user and role assignments of a project
 */
export const getProjectAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetProjectAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectAssignmentsResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/assignments',
        ...options
    });
};

/**
 * Update permissions for the default project
 */
export const updateProjectAssignments = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateProjectAssignmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to the default project
 */
export const getProjectAccessById = <ThrowOnError extends boolean = false>(options: Options<GetProjectAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/{project_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments to a project
 */
export const getProjectAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetProjectAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/{project_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a project
 */
export const updateProjectAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateProjectAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/project/{project_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to the default project
 */
export const getRoleAccessById = <ThrowOnError extends boolean = false>(options: Options<GetRoleAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/role/{role_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments of a role
 */
export const getRoleAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetRoleAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/role/{role_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a role
 */
export const updateRoleAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateRoleAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/role/{role_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to the server
 */
export const getServerAccess = <ThrowOnError extends boolean = false>(options?: Options<GetServerAccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerAccessResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/server/access',
        ...options
    });
};

/**
 * Get user and role assignments of the server
 */
export const getServerAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetServerAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerAssignmentsResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/server/assignments',
        ...options
    });
};

/**
 * Update permissions for this server
 */
export const updateServerAssignments = <ThrowOnError extends boolean = false>(options: Options<UpdateServerAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateServerAssignmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/server/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to a table
 */
export const getTableAccessById = <ThrowOnError extends boolean = false>(options: Options<GetTableAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTableAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/table/{table_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments for a table
 */
export const getTableAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetTableAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTableAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/table/{table_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a table
 */
export const updateTableAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateTableAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTableAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/table/{table_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get my access to a view
 */
export const getViewAccessById = <ThrowOnError extends boolean = false>(options: Options<GetViewAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetViewAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/view/{view_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments for a view
 */
export const getViewAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetViewAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetViewAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/view/{view_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a view
 */
export const updateViewAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateViewAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateViewAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/view/{view_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Authorization properties of a warehouse
 */
export const getWarehouseById = <ThrowOnError extends boolean = false>(options: Options<GetWarehouseByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWarehouseByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/warehouse/{warehouse_id}',
        ...options
    });
};

/**
 * Get my access to a warehouse
 */
export const getWarehouseAccessById = <ThrowOnError extends boolean = false>(options: Options<GetWarehouseAccessByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWarehouseAccessByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/warehouse/{warehouse_id}/access',
        ...options
    });
};

/**
 * Get user and role assignments for a warehouse
 */
export const getWarehouseAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<GetWarehouseAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWarehouseAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/warehouse/{warehouse_id}/assignments',
        ...options
    });
};

/**
 * Update permissions for a project
 */
export const updateWarehouseAssignmentsById = <ThrowOnError extends boolean = false>(options: Options<UpdateWarehouseAssignmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateWarehouseAssignmentsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/warehouse/{warehouse_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set managed access property of a warehouse
 */
export const setWarehouseManagedAccess = <ThrowOnError extends boolean = false>(options: Options<SetWarehouseManagedAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/permissions/warehouse/{warehouse_id}/managed-access',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectResponse2, CreateProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all projects the requesting user has access to
 */
export const listProjects = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsResponse2, ListProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/project-list',
        ...options
    });
};

/**
 * Delete a project by ID
 */
export const deleteProjectById = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectByIdResponse, DeleteProjectByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/project/{project_id}',
        ...options
    });
};

/**
 * Get a specific project by id
 */
export const getProjectById = <ThrowOnError extends boolean = false>(options: Options<GetProjectByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectByIdResponse, GetProjectByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/project/{project_id}',
        ...options
    });
};

/**
 * Rename project by id
 */
export const renameProjectById = <ThrowOnError extends boolean = false>(options: Options<RenameProjectByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RenameProjectByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/project/{project_id}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List roles in a project
 */
export const listRoles = <ThrowOnError extends boolean = false>(options?: Options<ListRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRolesResponse2, ListRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/role',
        ...options
    });
};

/**
 * Create a new role
 */
export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete role
 * All permissions of the role are permanently removed.
 */
export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/role/{id}',
        ...options
    });
};

/**
 * Get a role
 */
export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleResponse, GetRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/role/{id}',
        ...options
    });
};

/**
 * Update a role
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/role/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search for roles (Fuzzy)
 */
export const searchRole = <ThrowOnError extends boolean = false>(options: Options<SearchRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchRoleResponse2, SearchRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/search/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search for users (Fuzzy)
 */
export const searchUser = <ThrowOnError extends boolean = false>(options: Options<SearchUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchUserResponse2, SearchUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/search/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users
 */
export const listUser = <ThrowOnError extends boolean = false>(options?: Options<ListUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUserResponse, ListUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/user',
        ...options
    });
};

/**
 * Creates the user in the catalog if it does not exist.
 * If the user exists, it updates the users' metadata from the token.
 * The token sent to this endpoint should have "profile" and "email" scopes.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user
 * All permissions of the user are permanently removed and need to be re-added
 * if the user is re-registered.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/user/{id}',
        ...options
    });
};

/**
 * Get a user by ID
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/user/{id}',
        ...options
    });
};

/**
 * Update details of a user. Replaces the current details with the new details.
 * If a field is not provided, it is set to `None`.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all warehouses in a project
 * By default, this endpoint does not return deactivated warehouses.
 * To include deactivated warehouses, set the `include_deactivated` query parameter to `true`.
 */
export const listWarehouses = <ThrowOnError extends boolean = false>(options?: Options<ListWarehousesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWarehousesResponse2, ListWarehousesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse',
        ...options
    });
};

/**
 * Create a new warehouse.
 * Create a new warehouse in the given project. The project
 * of a warehouse cannot be changed after creation.
 * The storage configuration is validated by this method.
 */
export const createWarehouse = <ThrowOnError extends boolean = false>(options: Options<CreateWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWarehouseResponse2, CreateWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a warehouse by ID
 */
export const deleteWarehouse = <ThrowOnError extends boolean = false>(options: Options<DeleteWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWarehouseResponse, DeleteWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}',
        ...options
    });
};

/**
 * Get a warehouse by ID
 */
export const getWarehouse = <ThrowOnError extends boolean = false>(options: Options<GetWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWarehouseResponse2, GetWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}',
        ...options
    });
};

/**
 * Activate a warehouse
 */
export const activateWarehouse = <ThrowOnError extends boolean = false>(options: Options<ActivateWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ActivateWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/activate',
        ...options
    });
};

/**
 * Deactivate a warehouse
 */
export const deactivateWarehouse = <ThrowOnError extends boolean = false>(options: Options<DeactivateWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, DeactivateWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/deactivate',
        ...options
    });
};

/**
 * Update the Deletion Profile (soft-delete) of a warehouse.
 */
export const updateWarehouseDeleteProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateWarehouseDeleteProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateWarehouseDeleteProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/delete-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List soft-deleted tabulars
 * List all soft-deleted tabulars in the warehouse that are visible to you.
 */
export const listDeletedTabulars = <ThrowOnError extends boolean = false>(options: Options<ListDeletedTabularsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDeletedTabularsResponse2, ListDeletedTabularsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/deleted-tabulars',
        ...options
    });
};

export const undropTabulars = <ThrowOnError extends boolean = false>(options: Options<UndropTabularsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UndropTabularsResponse, UndropTabularsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/deleted-tabulars/undrop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const undropTabularsDeprecated = <ThrowOnError extends boolean = false>(options: Options<UndropTabularsDeprecatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UndropTabularsDeprecatedResponse, UndropTabularsDeprecatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/deleted_tabulars/undrop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getNamespaceProtection = <ThrowOnError extends boolean = false>(options: Options<GetNamespaceProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNamespaceProtectionResponse, GetNamespaceProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/namespace/{namespace_id}/protection',
        ...options
    });
};

export const setNamespaceProtection = <ThrowOnError extends boolean = false>(options: Options<SetNamespaceProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetNamespaceProtectionResponse, SetNamespaceProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/namespace/{namespace_id}/protection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const setWarehouseProtection = <ThrowOnError extends boolean = false>(options: Options<SetWarehouseProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetWarehouseProtectionResponse, SetWarehouseProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/protection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename a warehouse
 */
export const renameWarehouse = <ThrowOnError extends boolean = false>(options: Options<RenameWarehouseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RenameWarehouseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get warehouse statistics
 * Get statistics about the warehouse, currently table and view counts over time.
 *
 * We lazily create a new statistics entry every hour, in between hours, the existing entry is
 * being updated. If there's a change at created_at + 1 hour, a new entry is created.
 * If there's been no change, no new entry is created, meaning there may be gaps.
 *
 * Example:
 * - 00:16:32: warehouse created:
 * - timestamp: 01:00:00, created_at: 00:16:32, updated_at: null, 0 tables, 0 views
 * - 00:30:00: table created:
 * - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:30:00, 1 table, 0 views
 * - 00:45:00: view created:
 * - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:45:00, 1 table, 1 view
 * - 01:00:36: table deleted:
 * - timestamp: 02:00:00, created_at: 01:00:36, updated_at: null, 0 tables, 1 view
 * - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:45:00, 1 table, 1 view
 */
export const getWarehouseStatistics = <ThrowOnError extends boolean = false>(options: Options<GetWarehouseStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWarehouseStatisticsResponse, GetWarehouseStatisticsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/statistics',
        ...options
    });
};

/**
 * Update the storage profile of a warehouse including its storage credential.
 */
export const updateStorageProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateStorageProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateStorageProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/storage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the storage credential of a warehouse. The storage profile is not modified.
 * This can be used to update credentials before expiration.
 */
export const updateStorageCredential = <ThrowOnError extends boolean = false>(options: Options<UpdateStorageCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateStorageCredentialError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/storage-credential',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTableProtection = <ThrowOnError extends boolean = false>(options: Options<GetTableProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTableProtectionResponse, GetTableProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/table/{table_id}/protection',
        ...options
    });
};

export const setTableProtection = <ThrowOnError extends boolean = false>(options: Options<SetTableProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetTableProtectionResponse, SetTableProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/table/{table_id}/protection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getViewProtection = <ThrowOnError extends boolean = false>(options: Options<GetViewProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetViewProtectionResponse, GetViewProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/view/{view_id}/protection',
        ...options
    });
};

export const setViewProtection = <ThrowOnError extends boolean = false>(options: Options<SetViewProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetViewProtectionResponse, SetViewProtectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/warehouse/{warehouse_id}/view/{view_id}/protection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the currently authenticated user
 */
export const whoami = <ThrowOnError extends boolean = false>(options?: Options<WhoamiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WhoamiResponse, WhoamiError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/management/v1/whoami',
        ...options
    });
};