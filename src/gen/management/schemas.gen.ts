// This file is auto-generated by @hey-api/openapi-ts

export const AdlsProfileSchema = {
    type: 'object',
    required: ['filesystem', 'account-name'],
    properties: {
        'account-name': {
            type: 'string',
            description: 'Name of the azure storage account.'
        },
        'authority-host': {
            type: ['string', 'null'],
            format: 'uri',
            description: 'The authority host to use for authentication. Default: `https://login.microsoftonline.com`.'
        },
        filesystem: {
            type: 'string',
            description: 'Name of the adls filesystem, in blobstorage also known as container.'
        },
        host: {
            type: ['string', 'null'],
            description: 'The host to use for the storage account. Default: `dfs.core.windows.net`.'
        },
        'key-prefix': {
            type: ['string', 'null'],
            description: `Subpath in the filesystem to use.
The same prefix can be used for multiple warehouses.`
        },
        'sas-token-validity-seconds': {
            type: ['integer', 'null'],
            format: 'int64',
            description: 'The validity of the sas token in seconds. Default: 3600.',
            minimum: 0
        }
    }
} as const;

export const AuthZBackendSchema = {
    type: 'string',
    enum: ['allow-all', 'openfga']
} as const;

export const AzCredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'AzCredentialClientCredentials',
            required: ['client-id', 'tenant-id', 'client-secret', 'credential-type'],
            properties: {
                'client-id': {
                    type: 'string'
                },
                'client-secret': {
                    type: 'string'
                },
                'credential-type': {
                    type: 'string',
                    enum: ['client-credentials']
                },
                'tenant-id': {
                    type: 'string'
                }
            }
        },
        {
            type: 'object',
            title: 'AzCredentialSharedAccessKey',
            required: ['key', 'credential-type'],
            properties: {
                'credential-type': {
                    type: 'string',
                    enum: ['shared-access-key']
                },
                key: {
                    type: 'string'
                }
            }
        }
    ]
} as const;

export const BootstrapRequestSchema = {
    type: 'object',
    required: ['accept-terms-of-use'],
    properties: {
        'accept-terms-of-use': {
            type: 'boolean',
            description: 'Set to true if you accept LAKEKEEPER terms of use.'
        },
        'is-operator': {
            type: 'boolean',
            description: `If set to true, the calling user is treated as an operator and obtain
a corresponding role. If not specified, the user is treated as a human.`
        },
        'user-email': {
            type: ['string', 'null'],
            description: `Email of the user performing bootstrap. Optional. If not provided
the server will try to parse the email from the provided token.`
        },
        'user-name': {
            type: ['string', 'null'],
            description: `Name of the user performing bootstrap. Optional. If not provided
the server will try to parse the name from the provided token.
The initial user will become the global admin.`
        },
        'user-type': {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserType',
                    description: `Type of the user performing bootstrap. Optional. If not provided
the server will try to parse the type from the provided token.`
                }
            ]
        }
    }
} as const;

export const CheckOperationSchema = {
    oneOf: [
        {
            type: 'object',
            required: ['server'],
            properties: {
                server: {
                    type: 'object',
                    required: ['action'],
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/ServerAction'
                        }
                    }
                }
            }
        },
        {
            type: 'object',
            required: ['project'],
            properties: {
                project: {
                    type: 'object',
                    required: ['action'],
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/ProjectAction'
                        },
                        'project-id': {
                            type: ['string', 'null'],
                            format: 'uuid'
                        }
                    }
                }
            }
        },
        {
            type: 'object',
            required: ['warehouse'],
            properties: {
                warehouse: {
                    type: 'object',
                    required: ['action', 'warehouse-id'],
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/WarehouseAction'
                        },
                        'warehouse-id': {
                            type: 'string',
                            format: 'uuid'
                        }
                    }
                }
            }
        },
        {
            type: 'object',
            required: ['namespace'],
            properties: {
                namespace: {
                    allOf: [
                        {
                            '$ref': '#/components/schemas/NamespaceIdentOrUuid'
                        },
                        {
                            type: 'object',
                            required: ['action'],
                            properties: {
                                action: {
                                    '$ref': '#/components/schemas/NamespaceAction'
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            type: 'object',
            required: ['table'],
            properties: {
                table: {
                    allOf: [
                        {
                            '$ref': '#/components/schemas/TabularIdentOrUuid'
                        },
                        {
                            type: 'object',
                            required: ['action'],
                            properties: {
                                action: {
                                    '$ref': '#/components/schemas/TableAction'
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            type: 'object',
            required: ['view'],
            properties: {
                view: {
                    allOf: [
                        {
                            '$ref': '#/components/schemas/TabularIdentOrUuid'
                        },
                        {
                            type: 'object',
                            required: ['action'],
                            properties: {
                                action: {
                                    '$ref': '#/components/schemas/ViewAction'
                                }
                            }
                        }
                    ]
                }
            }
        }
    ],
    description: 'Represents an action on an object'
} as const;

export const CheckRequestSchema = {
    type: 'object',
    description: 'Check if a specific action is allowed on the given object',
    required: ['operation'],
    properties: {
        identity: {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserOrRole',
                    description: 'The user or role to check access for.'
                }
            ]
        },
        operation: {
            '$ref': '#/components/schemas/CheckOperation',
            description: 'The operation to check.'
        }
    }
} as const;

export const CheckResponseSchema = {
    type: 'object',
    required: ['allowed'],
    properties: {
        allowed: {
            type: 'boolean',
            description: 'Whether the action is allowed.'
        }
    }
} as const;

export const CreateProjectRequestSchema = {
    type: 'object',
    required: ['project-name'],
    properties: {
        'project-id': {
            type: ['string', 'null'],
            format: 'uuid',
            description: `Request a specific project ID - optional.
If not provided, a new project ID will be generated (recommended).`
        },
        'project-name': {
            type: 'string',
            description: 'Name of the project to create.'
        }
    }
} as const;

export const CreateProjectResponseSchema = {
    type: 'object',
    required: ['project-id'],
    properties: {
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the created project.'
        }
    }
} as const;

export const CreateRoleRequestSchema = {
    type: 'object',
    required: ['name'],
    properties: {
        description: {
            type: ['string', 'null'],
            description: 'Description of the role'
        },
        name: {
            type: 'string',
            description: 'Name of the role to create'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: `Project ID in which the role is created.
Only required if the project ID cannot be inferred and no default project is set.`
        }
    }
} as const;

export const CreateUserRequestSchema = {
    type: 'object',
    properties: {
        email: {
            type: ['string', 'null'],
            description: `Email of the user. If id is not specified, the email is extracted
from the provided token.`
        },
        id: {
            type: ['string', 'null'],
            description: `Subject id of the user - allows user provisioning.
The id must be identical to the subject in JWT tokens.
To create users in self-service manner, do not set the id.
The id is then extracted from the passed JWT token.`
        },
        name: {
            type: ['string', 'null'],
            description: `Name of the user. If id is not specified, the name is extracted
from the provided token.`
        },
        'update-if-exists': {
            type: 'boolean',
            description: `Update the user if it already exists
Default: false`
        },
        'user-type': {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/UserType',
                    description: 'Type of the user. Useful to override wrongly classified users'
                }
            ]
        }
    }
} as const;

export const CreateWarehouseRequestSchema = {
    type: 'object',
    required: ['warehouse-name', 'storage-profile'],
    properties: {
        'delete-profile': {
            '$ref': '#/components/schemas/TabularDeleteProfile',
            description: `Profile to determine behavior upon dropping of tabulars, defaults to soft-deletion with
7 days expiration.`
        },
        'project-id': {
            type: ['string', 'null'],
            format: 'uuid',
            description: `Project ID in which to create the warehouse.
If no default project is set for this server, this field is required.`
        },
        'storage-credential': {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/StorageCredential',
                    description: 'Optional storage credential to use for the warehouse.'
                }
            ]
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile',
            description: 'Storage profile to use for the warehouse.'
        },
        'warehouse-name': {
            type: 'string',
            description: `Name of the warehouse to create. Must be unique
within a project and may not contain "/"`
        }
    }
} as const;

export const CreateWarehouseResponseSchema = {
    type: 'object',
    required: ['warehouse-id'],
    properties: {
        'warehouse-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the created warehouse.'
        }
    }
} as const;

export const DeletedTabularResponseSchema = {
    type: 'object',
    required: ['id', 'name', 'namespace', 'typ', 'warehouse_id', 'created_at', 'deleted_at', 'expiration_date'],
    properties: {
        created_at: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular was created'
        },
        deleted_at: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular was deleted'
        },
        expiration_date: {
            type: 'string',
            format: 'date-time',
            description: 'Date when the tabular will not be recoverable anymore'
        },
        id: {
            type: 'string',
            format: 'uuid',
            description: 'Unique identifier of the tabular'
        },
        name: {
            type: 'string',
            description: 'Name of the tabular'
        },
        namespace: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'List of namespace parts the tabular belongs to'
        },
        typ: {
            '$ref': '#/components/schemas/TabularType',
            description: 'Type of the tabular'
        },
        warehouse_id: {
            type: 'string',
            format: 'uuid',
            description: 'Warehouse ID where the tabular is stored'
        }
    }
} as const;

export const ErrorModelSchema = {
    type: 'object',
    description: 'JSON error payload returned in a response with further details on the error',
    required: ['message', 'type', 'code'],
    properties: {
        code: {
            type: 'integer',
            format: 'int32',
            description: 'HTTP response code',
            minimum: 0
        },
        message: {
            type: 'string',
            description: 'Human-readable error message'
        },
        stack: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        type: {
            type: 'string',
            description: 'Internal type definition of the error'
        }
    }
} as const;

export const GcsCredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'GcsCredentialServiceAccountKey',
            description: `Service Account Key

The key is the JSON object obtained when creating a service account key in the GCP console.`,
            required: ['key', 'credential-type'],
            properties: {
                'credential-type': {
                    type: 'string',
                    enum: ['service-account-key']
                },
                key: {
                    '$ref': '#/components/schemas/GcsServiceKey'
                }
            }
        }
    ],
    description: `GCS Credentials

Currently only supports Service Account Key
Example of a key:
\`\`\`json
    {
      "type": "service_account",
      "project_id": "example-project-1234",
      "private_key_id": "....",
      "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
      "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
      "client_id": "123456789012345678901",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
      "universe_domain": "googleapis.com"
    }
\`\`\``
} as const;

export const GcsProfileSchema = {
    type: 'object',
    required: ['bucket'],
    properties: {
        bucket: {
            type: 'string',
            description: 'Name of the GCS bucket'
        },
        'key-prefix': {
            type: ['string', 'null'],
            description: `Subpath in the bucket to use.
The same prefix can be used for multiple warehouses.`
        }
    }
} as const;

export const GcsServiceKeySchema = {
    type: 'object',
    required: ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id', 'auth_uri', 'token_uri', 'auth_provider_x509_cert_url', 'client_x509_cert_url', 'universe_domain'],
    properties: {
        auth_provider_x509_cert_url: {
            type: 'string'
        },
        auth_uri: {
            type: 'string'
        },
        client_email: {
            type: 'string'
        },
        client_id: {
            type: 'string'
        },
        client_x509_cert_url: {
            type: 'string'
        },
        private_key: {
            type: 'string'
        },
        private_key_id: {
            type: 'string'
        },
        project_id: {
            type: 'string'
        },
        token_uri: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        universe_domain: {
            type: 'string'
        }
    }
} as const;

export const GetNamespaceAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAction'
            }
        }
    }
} as const;

export const GetNamespaceAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        }
    }
} as const;

export const GetNamespaceAuthPropertiesResponseSchema = {
    type: 'object',
    required: ['managed-access', 'managed-access-inherited'],
    properties: {
        'managed-access': {
            type: 'boolean'
        },
        'managed-access-inherited': {
            type: 'boolean'
        }
    }
} as const;

export const GetProjectAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAction'
            }
        }
    }
} as const;

export const GetProjectAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments', 'project-id'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        },
        'project-id': {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const GetProjectResponseSchema = {
    type: 'object',
    required: ['project-id', 'project-name'],
    properties: {
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the project.'
        },
        'project-name': {
            type: 'string',
            description: 'Name of the project'
        }
    }
} as const;

export const GetRoleAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAction'
            }
        }
    }
} as const;

export const GetRoleAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        }
    }
} as const;

export const GetServerAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAction'
            }
        }
    }
} as const;

export const GetServerAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        }
    }
} as const;

export const GetTableAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAction'
            }
        }
    }
} as const;

export const GetTableAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        }
    }
} as const;

export const GetViewAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAction'
            }
        }
    }
} as const;

export const GetViewAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        }
    }
} as const;

export const GetWarehouseAccessResponseSchema = {
    type: 'object',
    required: ['allowed-actions'],
    properties: {
        'allowed-actions': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAction'
            }
        }
    }
} as const;

export const GetWarehouseAssignmentsResponseSchema = {
    type: 'object',
    required: ['assignments'],
    properties: {
        assignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        }
    }
} as const;

export const GetWarehouseAuthPropertiesResponseSchema = {
    type: 'object',
    required: ['managed-access'],
    properties: {
        'managed-access': {
            type: 'boolean'
        }
    }
} as const;

export const GetWarehouseResponseSchema = {
    type: 'object',
    required: ['id', 'name', 'project-id', 'storage-profile', 'delete-profile', 'status'],
    properties: {
        'delete-profile': {
            '$ref': '#/components/schemas/TabularDeleteProfile',
            description: 'Delete profile used for the warehouse.'
        },
        id: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the warehouse.'
        },
        name: {
            type: 'string',
            description: 'Name of the warehouse.'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Project ID in which the warehouse is created.'
        },
        status: {
            '$ref': '#/components/schemas/WarehouseStatus',
            description: 'Whether the warehouse is active.'
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile',
            description: 'Storage profile used for the warehouse.'
        }
    }
} as const;

export const IcebergErrorResponseSchema = {
    type: 'object',
    description: 'JSON wrapper for all error responses (non-2xx)',
    required: ['error'],
    properties: {
        error: {
            '$ref': '#/components/schemas/ErrorModel'
        }
    }
} as const;

export const ListDeletedTabularsResponseSchema = {
    type: 'object',
    required: ['tabulars'],
    properties: {
        next_page_token: {
            type: ['string', 'null'],
            description: 'Token to fetch the next page'
        },
        tabulars: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DeletedTabularResponse'
            },
            description: 'List of tabulars'
        }
    }
} as const;

export const ListProjectsResponseSchema = {
    type: 'object',
    required: ['projects'],
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProjectResponse'
            },
            description: 'List of projects'
        }
    }
} as const;

export const ListRolesResponseSchema = {
    type: 'object',
    required: ['roles'],
    properties: {
        next_page_token: {
            type: ['string', 'null']
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        }
    }
} as const;

export const ListUsersResponseSchema = {
    type: 'object',
    required: ['users'],
    properties: {
        next_page_token: {
            type: ['string', 'null']
        },
        users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    }
} as const;

export const ListWarehousesResponseSchema = {
    type: 'object',
    required: ['warehouses'],
    properties: {
        warehouses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetWarehouseResponse'
            },
            description: 'List of warehouses in the project.'
        }
    }
} as const;

export const NamespaceActionSchema = {
    type: 'string',
    enum: ['create_table', 'create_view', 'create_namespace', 'delete', 'update_properties', 'get_metadata', 'read_assignments', 'grant_create', 'grant_describe', 'grant_modify', 'grant_select', 'grant_pass_grants', 'grant_manage_grants']
} as const;

export const NamespaceAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentOwnership'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['pass_grants']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentPassGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['manage_grants']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentManageGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['describe']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentDescribe'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['select']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentSelect'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['create']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentCreate'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['modify']
                        }
                    }
                }
            ],
            title: 'NamespaceAssignmentModify'
        }
    ]
} as const;

export const NamespaceIdentOrUuidSchema = {
    oneOf: [
        {
            type: 'object',
            required: ['namespace-id'],
            properties: {
                'namespace-id': {
                    type: 'string',
                    format: 'uuid'
                }
            }
        },
        {
            type: 'object',
            required: ['namespace', 'warehouse-id'],
            properties: {
                namespace: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                'warehouse-id': {
                    type: 'string',
                    format: 'uuid'
                }
            }
        }
    ],
    description: 'Identifier for a namespace, either a UUID or its name and warehouse ID'
} as const;

export const NamespaceRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'create', 'modify']
} as const;

export const ProjectActionSchema = {
    type: 'string',
    enum: ['create_warehouse', 'delete', 'rename', 'list_warehouses', 'create_role', 'list_roles', 'search_roles', 'read_assignments', 'grant_role_creator', 'grant_create', 'grant_describe', 'grant_modify', 'grant_select', 'grant_project_admin', 'grant_security_admin', 'grant_data_admin']
} as const;

export const ProjectAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['project_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentProjectAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['security_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentSecurityAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['data_admin']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentDataAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['role_creator']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentRoleCreator'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['describe']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentDescribe'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['select']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentSelect'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['create']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentCreate'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['modify']
                        }
                    }
                }
            ],
            title: 'ProjectAssignmentModify'
        }
    ]
} as const;

export const ProjectRelationSchema = {
    type: 'string',
    enum: ['project_admin', 'security_admin', 'data_admin', 'role_creator', 'describe', 'select', 'create', 'modify']
} as const;

export const RenameProjectRequestSchema = {
    type: 'object',
    required: ['new-name'],
    properties: {
        'new-name': {
            type: 'string',
            description: 'New name for the project.'
        },
        'project-id': {
            type: ['string', 'null'],
            format: 'uuid',
            description: `Optional project ID.
Only required if the project ID cannot be inferred and no default project is set.`
        }
    }
} as const;

export const RenameWarehouseRequestSchema = {
    type: 'object',
    required: ['new-name'],
    properties: {
        'new-name': {
            type: 'string',
            description: 'New name for the warehouse.'
        }
    }
} as const;

export const RoleSchema = {
    type: 'object',
    required: ['id', 'name', 'project-id', 'created-at'],
    properties: {
        'created-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the role was created'
        },
        description: {
            type: ['string', 'null'],
            description: 'Description of the role'
        },
        id: {
            type: 'string',
            format: 'uuid',
            description: 'Globally unique id of this role'
        },
        name: {
            type: 'string',
            description: 'Name of the role'
        },
        'project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Project ID in which the role is created.'
        },
        'updated-at': {
            type: ['string', 'null'],
            format: 'date-time',
            description: 'Timestamp when the role was last updated'
        }
    }
} as const;

export const RoleActionSchema = {
    type: 'string',
    enum: ['assume', 'can_grant_assignee', 'can_change_ownership', 'delete', 'update', 'read', 'read_assignments']
} as const;

export const RoleAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['assignee']
                        }
                    }
                }
            ],
            title: 'RoleAssignmentAssignee'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'RoleAssignmentOwnership'
        }
    ]
} as const;

export const RoleRelationSchema = {
    type: 'string',
    enum: ['assignee', 'ownership']
} as const;

export const S3CredentialSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'S3CredentialAccessKey',
            required: ['aws-access-key-id', 'aws-secret-access-key', 'credential-type'],
            properties: {
                'aws-access-key-id': {
                    type: 'string'
                },
                'aws-secret-access-key': {
                    type: 'string'
                },
                'credential-type': {
                    type: 'string',
                    enum: ['access-key']
                }
            }
        }
    ]
} as const;

export const S3FlavorSchema = {
    type: 'string',
    enum: ['aws', 's3-compat']
} as const;

export const S3ProfileSchema = {
    type: 'object',
    required: ['bucket', 'region', 'sts-enabled'],
    properties: {
        'allow-alternative-protocols': {
            type: ['boolean', 'null'],
            description: `Allow \`s3a://\` and \`s3n://\` in locations.
This is disabled by default. We do not recommend to use this setting
except for migration of old hadoop-based tables via the register endpoint.
Tables with \`s3a\` paths are not accessible outside the Java ecosystem.`
        },
        'assume-role-arn': {
            type: ['string', 'null'],
            description: 'Optional ARN to assume when accessing the bucket'
        },
        bucket: {
            type: 'string',
            description: 'Name of the S3 bucket'
        },
        endpoint: {
            type: ['string', 'null'],
            format: 'uri',
            description: `Optional endpoint to use for S3 requests, if not provided
the region will be used to determine the endpoint.
If both region and endpoint are provided, the endpoint will be used.
Example: \`http://s3-de.my-domain.com:9000\``
        },
        flavor: {
            '$ref': '#/components/schemas/S3Flavor',
            description: `S3 flavor to use.
Defaults to AWS`
        },
        'key-prefix': {
            type: ['string', 'null'],
            description: `Subpath in the bucket to use.
The same prefix can be used for multiple warehouses.`
        },
        'path-style-access': {
            type: ['boolean', 'null'],
            description: `Path style access for S3 requests.
If the underlying S3 supports both, we recommend to not set \`path_style_access\`.`
        },
        region: {
            type: 'string',
            description: 'Region to use for S3 requests.'
        },
        'sts-enabled': {
            type: 'boolean'
        },
        'sts-role-arn': {
            type: ['string', 'null'],
            description: 'Optional role ARN to assume for sts vended-credentials'
        }
    }
} as const;

export const SearchRoleRequestSchema = {
    type: 'object',
    required: ['search'],
    properties: {
        'project-id': {
            type: ['string', 'null'],
            format: 'uuid',
            description: `Deprecated: Please use the x-project-id header instead.
Project ID in which the role is created.
Only required if the project ID cannot be inferred from the
users token and no default project is set.`
        },
        search: {
            type: 'string',
            description: `Search string for fuzzy search.
Length is truncated to 64 characters.`
        }
    }
} as const;

export const SearchRoleResponseSchema = {
    type: 'object',
    required: ['roles'],
    properties: {
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            },
            description: 'List of users matching the search criteria'
        }
    }
} as const;

export const SearchUserSchema = {
    type: 'object',
    required: ['name', 'id', 'user-type'],
    properties: {
        email: {
            type: ['string', 'null'],
            description: `Email of the user. If id is not specified, the email is extracted
from the provided token.`
        },
        id: {
            type: 'string',
            description: 'ID of the user'
        },
        name: {
            type: 'string',
            description: 'Name of the user'
        },
        'user-type': {
            '$ref': '#/components/schemas/UserType',
            description: 'Type of the user'
        }
    }
} as const;

export const SearchUserRequestSchema = {
    type: 'object',
    required: ['search'],
    properties: {
        search: {
            type: 'string',
            description: `Search string for fuzzy search.
Length is truncated to 64 characters.`
        }
    }
} as const;

export const SearchUserResponseSchema = {
    type: 'object',
    description: 'Search result for users',
    required: ['users'],
    properties: {
        users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SearchUser'
            },
            description: 'List of users matching the search criteria'
        }
    }
} as const;

export const ServerActionSchema = {
    type: 'string',
    enum: ['create_project', 'update_users', 'delete_users', 'list_users', 'grant_admin', 'provision_users', 'read_assignments']
} as const;

export const ServerAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['admin']
                        }
                    }
                }
            ],
            title: 'ServerAssignmentAdmin'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['operator']
                        }
                    }
                }
            ],
            title: 'ServerAssignmentOperator'
        }
    ]
} as const;

export const ServerInfoSchema = {
    type: 'object',
    required: ['version', 'bootstrapped', 'server-id', 'default-project-id', 'authz-backend'],
    properties: {
        'authz-backend': {
            '$ref': '#/components/schemas/AuthZBackend',
            description: `\`AuthZ\` backend in use.`
        },
        bootstrapped: {
            type: 'boolean',
            description: 'Whether the catalog has been bootstrapped.'
        },
        'default-project-id': {
            type: 'string',
            format: 'uuid',
            description: 'Default Project ID. Null if not set'
        },
        'server-id': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the server.'
        },
        version: {
            type: 'string',
            description: 'Version of the server.'
        }
    }
} as const;

export const ServerRelationSchema = {
    type: 'string',
    enum: ['admin', 'operator']
} as const;

export const SetManagedAccessRequestSchema = {
    type: 'object',
    required: ['managed-access'],
    properties: {
        'managed-access': {
            type: 'boolean'
        }
    }
} as const;

export const StorageCredentialSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/S3Credential',
                    description: `Credentials for S3 storage

Example payload in the code-snippet below:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "s3",
    "credential-type": "access-key",
    "aws-access-key-id": "minio-root-user",
    "aws-secret-access-key": "minio-root-password"
  }"#).unwrap();
\`\`\``
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['s3']
                        }
                    }
                }
            ],
            title: 'StorageCredentialS3',
            description: `Credentials for S3 storage

Example payload in the code-snippet below:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "s3",
    "credential-type": "access-key",
    "aws-access-key-id": "minio-root-user",
    "aws-secret-access-key": "minio-root-password"
  }"#).unwrap();
\`\`\``
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/AzCredential',
                    description: `Credentials for Az storage

Example payload:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "az",
    "credential-type": "client-credentials",
    "client-id": "...",
    "client-secret": "...",
    "tenant-id": "..."
  }"#).unwrap();
\`\`\``
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['az']
                        }
                    }
                }
            ],
            title: 'StorageCredentialAz',
            description: `Credentials for Az storage

Example payload:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "az",
    "credential-type": "client-credentials",
    "client-id": "...",
    "client-secret": "...",
    "tenant-id": "..."
  }"#).unwrap();
\`\`\``
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/GcsCredential',
                    description: `Credentials for GCS storage

Example payload in the code-snippet below:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "gcs",
    "credential-type": "service-account-key",
    "key": {
      "type": "service_account",
      "project_id": "example-project-1234",
      "private_key_id": "....",
      "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
      "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
      "client_id": "123456789012345678901",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
      "universe_domain": "googleapis.com"
    }
}"#).unwrap();
\`\`\`
`
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['gcs']
                        }
                    }
                }
            ],
            title: 'StorageCredentialGcs',
            description: `Credentials for GCS storage

Example payload in the code-snippet below:

\`\`\`
use iceberg_catalog::service::storage::StorageCredential;
let cred: StorageCredential = serde_json::from_str(r#"{
    "type": "gcs",
    "credential-type": "service-account-key",
    "key": {
      "type": "service_account",
      "project_id": "example-project-1234",
      "private_key_id": "....",
      "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
      "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
      "client_id": "123456789012345678901",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
      "universe_domain": "googleapis.com"
    }
}"#).unwrap();
\`\`\`
`
        }
    ],
    description: 'Storage secret for a warehouse.'
} as const;

export const StorageProfileSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/AdlsProfile',
                    description: 'Azure storage profile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['adls']
                        }
                    }
                }
            ],
            title: 'StorageProfileAdls',
            description: 'Azure storage profile'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/S3Profile',
                    description: 'S3 storage profile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['s3']
                        }
                    }
                }
            ],
            title: 'StorageProfileS3',
            description: 'S3 storage profile'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/GcsProfile'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['gcs']
                        }
                    }
                }
            ],
            title: 'StorageProfileGcs'
        }
    ],
    description: 'Storage profile for a warehouse.'
} as const;

export const TableActionSchema = {
    type: 'string',
    enum: ['drop', 'write_data', 'read_data', 'get_metadata', 'commit', 'rename', 'read_assignments', 'grant_pass_grants', 'grant_manage_grants', 'grant_describe', 'grant_select', 'grant_modify', 'change_ownership']
} as const;

export const TableAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'TableAssignmentOwnership'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['pass_grants']
                        }
                    }
                }
            ],
            title: 'TableAssignmentPassGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['manage_grants']
                        }
                    }
                }
            ],
            title: 'TableAssignmentManageGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['describe']
                        }
                    }
                }
            ],
            title: 'TableAssignmentDescribe'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['select']
                        }
                    }
                }
            ],
            title: 'TableAssignmentSelect'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['modify']
                        }
                    }
                }
            ],
            title: 'TableAssignmentCreate'
        }
    ]
} as const;

export const TableRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'modify']
} as const;

export const TabularDeleteProfileSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'TabularDeleteProfileHard',
            required: ['type'],
            properties: {
                type: {
                    type: 'string',
                    enum: ['hard']
                }
            }
        },
        {
            type: 'object',
            title: 'TabularDeleteProfileSoft',
            required: ['expiration-seconds', 'type'],
            properties: {
                'expiration-seconds': {
                    type: 'integer',
                    format: 'int32'
                },
                type: {
                    type: 'string',
                    enum: ['soft']
                }
            }
        }
    ]
} as const;

export const TabularIdentOrUuidSchema = {
    oneOf: [
        {
            type: 'object',
            required: ['table-id'],
            properties: {
                'table-id': {
                    type: 'string',
                    format: 'uuid'
                }
            }
        },
        {
            type: 'object',
            required: ['namespace', 'table', 'warehouse-id'],
            properties: {
                namespace: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                table: {
                    type: 'string',
                    description: 'Name of the table or view'
                },
                'warehouse-id': {
                    type: 'string',
                    format: 'uuid'
                }
            }
        }
    ],
    description: 'Identifier for a table or view, either a UUID or its name and namespace'
} as const;

export const TabularIdentUuidSchema = {
    oneOf: [
        {
            type: 'object',
            required: ['id', 'type'],
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['table']
                }
            }
        },
        {
            type: 'object',
            required: ['id', 'type'],
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                type: {
                    type: 'string',
                    enum: ['view']
                }
            }
        }
    ]
} as const;

export const TabularTypeSchema = {
    type: 'string',
    description: 'Type of tabular',
    enum: ['table', 'view']
} as const;

export const UndropTabularsRequestSchema = {
    type: 'object',
    required: ['targets'],
    properties: {
        targets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TabularIdentUuid'
            },
            description: 'Tabulars to undrop'
        }
    }
} as const;

export const UpdateNamespaceAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NamespaceAssignment'
            }
        }
    }
} as const;

export const UpdateProjectAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectAssignment'
            }
        }
    }
} as const;

export const UpdateRoleAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleAssignment'
            }
        }
    }
} as const;

export const UpdateRoleRequestSchema = {
    type: 'object',
    required: ['name'],
    properties: {
        description: {
            type: ['string', 'null'],
            description: 'Description of the role. If not set, the description will be removed.'
        },
        name: {
            type: 'string',
            description: 'Name of the role to create'
        }
    }
} as const;

export const UpdateServerAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServerAssignment'
            }
        }
    }
} as const;

export const UpdateTableAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableAssignment'
            }
        }
    }
} as const;

export const UpdateUserRequestSchema = {
    type: 'object',
    required: ['name', 'user_type'],
    properties: {
        email: {
            type: ['string', 'null']
        },
        name: {
            type: 'string'
        },
        user_type: {
            '$ref': '#/components/schemas/UserType'
        }
    }
} as const;

export const UpdateViewAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ViewAssignment'
            }
        }
    }
} as const;

export const UpdateWarehouseAssignmentsRequestSchema = {
    type: 'object',
    properties: {
        deletes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        },
        writes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseAssignment'
            }
        }
    }
} as const;

export const UpdateWarehouseCredentialRequestSchema = {
    type: 'object',
    properties: {
        'new-storage-credential': {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/StorageCredential',
                    description: `New storage credential to use for the warehouse.
If not specified, the existing credential is removed.`
                }
            ]
        }
    }
} as const;

export const UpdateWarehouseDeleteProfileRequestSchema = {
    type: 'object',
    required: ['delete-profile'],
    properties: {
        'delete-profile': {
            '$ref': '#/components/schemas/TabularDeleteProfile'
        }
    }
} as const;

export const UpdateWarehouseStorageRequestSchema = {
    type: 'object',
    required: ['storage-profile'],
    properties: {
        'storage-credential': {
            oneOf: [
                {
                    type: 'null'
                },
                {
                    '$ref': '#/components/schemas/StorageCredential',
                    description: `Optional storage credential to use for the warehouse.
The existing credential is not re-used. If no credential is
provided, we assume that this storage does not require credentials.`
                }
            ]
        },
        'storage-profile': {
            '$ref': '#/components/schemas/StorageProfile',
            description: `Storage profile to use for the warehouse.
The new profile must point to the same location as the existing profile
to avoid data loss. For S3 this means that you may not change the
bucket, key prefix, or region.`
        }
    }
} as const;

export const UserSchema = {
    type: 'object',
    description: 'User of the catalog',
    required: ['name', 'id', 'user-type', 'last-updated-with', 'created-at'],
    properties: {
        'created-at': {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was created'
        },
        email: {
            type: ['string', 'null'],
            description: 'Email of the user'
        },
        id: {
            type: 'string',
            description: "The user's ID"
        },
        'last-updated-with': {
            '$ref': '#/components/schemas/UserLastUpdatedWith',
            description: 'The endpoint that last updated the user'
        },
        name: {
            type: 'string',
            description: 'Name of the user'
        },
        'updated-at': {
            type: ['string', 'null'],
            format: 'date-time',
            description: 'Timestamp when the user was last updated'
        },
        'user-type': {
            '$ref': '#/components/schemas/UserType',
            description: 'Type of the user'
        }
    }
} as const;

export const UserLastUpdatedWithSchema = {
    type: 'string',
    description: 'How the user was last updated',
    enum: ['create-endpoint', 'config-call-creation', 'update-endpoint']
} as const;

export const UserOrRoleSchema = {
    oneOf: [
        {
            type: 'object',
            title: 'UserOrRoleUser',
            description: 'Id of the user',
            required: ['user'],
            properties: {
                user: {
                    type: 'string',
                    format: 'uuid',
                    description: 'Id of the user'
                }
            }
        },
        {
            type: 'object',
            title: 'UserOrRoleRole',
            description: 'Id of the role',
            required: ['role'],
            properties: {
                role: {
                    type: 'string',
                    format: 'uuid',
                    description: 'Id of the role'
                }
            }
        }
    ],
    description: 'Identifies a user or a role'
} as const;

export const UserTypeSchema = {
    type: 'string',
    description: 'Type of a User',
    enum: ['human', 'application']
} as const;

export const ViewActionSchema = {
    type: 'string',
    enum: ['drop', 'commit', 'get_metadata', 'rename', 'read_assignments', 'grant_pass_grants', 'grant_manage_grants', 'grant_describe', 'grant_modify', 'change_ownership']
} as const;

export const ViewAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentOwnership'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['pass_grants']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentPassGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['manage_grants']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentManageGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['describe']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentDescribe'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['modify']
                        }
                    }
                }
            ],
            title: 'ViewAssignmentModify'
        }
    ]
} as const;

export const ViewRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'modify']
} as const;

export const WarehouseActionSchema = {
    type: 'string',
    enum: ['create_namespace', 'delete', 'modify_storage', 'modify_storage_credential', 'get_config', 'get_metadata', 'list_namespaces', 'include_in_list', 'deactivate', 'activate', 'rename', 'list_deleted_tabulars', 'read_assignments', 'grant_create', 'grant_describe', 'grant_modify', 'grant_select', 'grant_pass_grants', 'grant_manage_grants', 'change_ownership']
} as const;

export const WarehouseAssignmentSchema = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['ownership']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentOwnership'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['pass_grants']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentPassGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['manage_grants']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentManageGrants'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['describe']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentDescribe'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['select']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentSelect'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['create']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentCreate'
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserOrRole'
                },
                {
                    type: 'object',
                    required: ['type'],
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['modify']
                        }
                    }
                }
            ],
            title: 'WarehouseAssignmentModify'
        }
    ]
} as const;

export const WarehouseRelationSchema = {
    type: 'string',
    enum: ['ownership', 'pass_grants', 'manage_grants', 'describe', 'select', 'create', 'modify']
} as const;

export const WarehouseStatisticsSchema = {
    type: 'object',
    required: ['timestamp', 'number_of_tables', 'number_of_views', 'updated_at'],
    properties: {
        number_of_tables: {
            type: 'integer',
            format: 'int64',
            description: 'Number of tables in the warehouse.'
        },
        number_of_views: {
            type: 'integer',
            format: 'int64',
            description: 'Number of views in the warehouse.'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: `Timestamp of when these statistics are valid until

We lazily create a new statistics entry every hour, in between hours, the existing entry
is being updated. If there's a change at \`created_at\` + 1 hour, a new entry is created. If
there's no change, no new entry is created.`
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp of when these statistics were last updated'
        }
    }
} as const;

export const WarehouseStatisticsResponseSchema = {
    type: 'object',
    required: ['warehouse-ident', 'stats'],
    properties: {
        'next-page-token': {
            type: ['string', 'null'],
            description: 'Next page token'
        },
        stats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WarehouseStatistics'
            },
            description: 'Ordered list of warehouse statistics.'
        },
        'warehouse-ident': {
            type: 'string',
            format: 'uuid',
            description: 'ID of the warehouse for which the stats were collected.'
        }
    }
} as const;

export const WarehouseStatusSchema = {
    type: 'string',
    description: 'Status of a warehouse',
    enum: ['active', 'inactive']
} as const;